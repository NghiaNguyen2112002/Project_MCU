
Demo_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004318  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004498  08004498  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004498  08004498  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004498  08004498  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800449c  0800449c  0001449c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080044a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000090  08004530  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08004530  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc1c  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b5  00000000  00000000  0002bcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0002de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  0002ec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fc6  00000000  00000000  0002f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea47  00000000  00000000  000478f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a1f  00000000  00000000  0005633d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ded5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bac  00000000  00000000  000dedac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	0800440c 	.word	0x0800440c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	0800440c 	.word	0x0800440c

0800014c <Buzzer_Control>:
uint8_t	is_P_Light_On = 0;

void Off_Buzzer(void){
	BUZZER_VOLUME = 0;
}
void Buzzer_Control(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(BUZZER_VOLUME == 0){
 8000150:	4b0d      	ldr	r3, [pc, #52]	; (8000188 <Buzzer_Control+0x3c>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d110      	bne.n	800017a <Buzzer_Control+0x2e>
		BUZZER_VOLUME = (TIME_RED - time_1) * 100 / TIME_RED;
 8000158:	4b0c      	ldr	r3, [pc, #48]	; (800018c <Buzzer_Control+0x40>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	461a      	mov	r2, r3
 800015e:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <Buzzer_Control+0x44>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	1ad3      	subs	r3, r2, r3
 8000164:	2264      	movs	r2, #100	; 0x64
 8000166:	fb02 f303 	mul.w	r3, r2, r3
 800016a:	4a08      	ldr	r2, [pc, #32]	; (800018c <Buzzer_Control+0x40>)
 800016c:	7812      	ldrb	r2, [r2, #0]
 800016e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000172:	b2da      	uxtb	r2, r3
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <Buzzer_Control+0x3c>)
 8000176:	701a      	strb	r2, [r3, #0]
	}
	else BUZZER_VOLUME = 0;

}
 8000178:	e002      	b.n	8000180 <Buzzer_Control+0x34>
	else BUZZER_VOLUME = 0;
 800017a:	4b03      	ldr	r3, [pc, #12]	; (8000188 <Buzzer_Control+0x3c>)
 800017c:	2200      	movs	r2, #0
 800017e:	701a      	strb	r2, [r3, #0]
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	200000b6 	.word	0x200000b6
 800018c:	20000000 	.word	0x20000000
 8000190:	200000b1 	.word	0x200000b1

08000194 <Pedestrian_Control>:
void Pedestrian_Control(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	is_P_Light_On = 1;
 8000198:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <Pedestrian_Control+0x2c>)
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
	if(mode_auto_1 == RED){
 800019e:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <Pedestrian_Control+0x30>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d107      	bne.n	80001b6 <Pedestrian_Control+0x22>
		Light_P_Green();
 80001a6:	f000 fdb3 	bl	8000d10 <Light_P_Green>
//		time_1 (red) decreases => BUZZER_VOLUME increases
//		On Off Buzzer  every 500ms
		SCH_Add_Task(Buzzer_Control, 0, 50);
 80001aa:	2232      	movs	r2, #50	; 0x32
 80001ac:	2100      	movs	r1, #0
 80001ae:	4806      	ldr	r0, [pc, #24]	; (80001c8 <Pedestrian_Control+0x34>)
 80001b0:	f000 fdd4 	bl	8000d5c <SCH_Add_Task>
	}
	else {
//		traffic light: AMBER or GREEN
		Light_P_Red();
	}
}
 80001b4:	e001      	b.n	80001ba <Pedestrian_Control+0x26>
		Light_P_Red();
 80001b6:	f000 fd97 	bl	8000ce8 <Light_P_Red>
}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	200000b5 	.word	0x200000b5
 80001c4:	200000ae 	.word	0x200000ae
 80001c8:	0800014d 	.word	0x0800014d

080001cc <fsm_for_manual_1>:
	is_P_Light_On = 0;

}


void fsm_for_manual_1(void){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	switch(mode_manual_1){
 80001d0:	4b1d      	ldr	r3, [pc, #116]	; (8000248 <fsm_for_manual_1+0x7c>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b03      	cmp	r3, #3
 80001d6:	d833      	bhi.n	8000240 <fsm_for_manual_1+0x74>
 80001d8:	a201      	add	r2, pc, #4	; (adr r2, 80001e0 <fsm_for_manual_1+0x14>)
 80001da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001de:	bf00      	nop
 80001e0:	080001f1 	.word	0x080001f1
 80001e4:	080001f9 	.word	0x080001f9
 80001e8:	08000211 	.word	0x08000211
 80001ec:	08000229 	.word	0x08000229
	case INIT_LIGHT:
		mode_manual_1 = RED;
 80001f0:	4b15      	ldr	r3, [pc, #84]	; (8000248 <fsm_for_manual_1+0x7c>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	701a      	strb	r2, [r3, #0]
		break;
 80001f6:	e024      	b.n	8000242 <fsm_for_manual_1+0x76>
	case RED:
		if(is_button_pressed(BUTTON_1)) mode_manual_1 = AMBER;
 80001f8:	2000      	movs	r0, #0
 80001fa:	f000 fadb 	bl	80007b4 <is_button_pressed>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d002      	beq.n	800020a <fsm_for_manual_1+0x3e>
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <fsm_for_manual_1+0x7c>)
 8000206:	2202      	movs	r2, #2
 8000208:	701a      	strb	r2, [r3, #0]
		Light_1_Red();
 800020a:	f000 fd01 	bl	8000c10 <Light_1_Red>
		break;
 800020e:	e018      	b.n	8000242 <fsm_for_manual_1+0x76>
	case AMBER:
		if(is_button_pressed(BUTTON_1)) mode_manual_1 = GREEN;
 8000210:	2000      	movs	r0, #0
 8000212:	f000 facf 	bl	80007b4 <is_button_pressed>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d002      	beq.n	8000222 <fsm_for_manual_1+0x56>
 800021c:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <fsm_for_manual_1+0x7c>)
 800021e:	2203      	movs	r2, #3
 8000220:	701a      	strb	r2, [r3, #0]
		Light_1_Amber();
 8000222:	f000 fd09 	bl	8000c38 <Light_1_Amber>
		break;
 8000226:	e00c      	b.n	8000242 <fsm_for_manual_1+0x76>
	case GREEN:
		if(is_button_pressed(BUTTON_1)) mode_manual_1 = RED;
 8000228:	2000      	movs	r0, #0
 800022a:	f000 fac3 	bl	80007b4 <is_button_pressed>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <fsm_for_manual_1+0x6e>
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <fsm_for_manual_1+0x7c>)
 8000236:	2201      	movs	r2, #1
 8000238:	701a      	strb	r2, [r3, #0]
		Light_1_Green();
 800023a:	f000 fd11 	bl	8000c60 <Light_1_Green>
		break;
 800023e:	e000      	b.n	8000242 <fsm_for_manual_1+0x76>
	default:
		break;
 8000240:	bf00      	nop
	}
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	200000ac 	.word	0x200000ac

0800024c <fsm_for_manual_2>:
void fsm_for_manual_2(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	switch(mode_manual_2){
 8000250:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <fsm_for_manual_2+0x7c>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b03      	cmp	r3, #3
 8000256:	d833      	bhi.n	80002c0 <fsm_for_manual_2+0x74>
 8000258:	a201      	add	r2, pc, #4	; (adr r2, 8000260 <fsm_for_manual_2+0x14>)
 800025a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800025e:	bf00      	nop
 8000260:	08000271 	.word	0x08000271
 8000264:	08000279 	.word	0x08000279
 8000268:	08000291 	.word	0x08000291
 800026c:	080002a9 	.word	0x080002a9
	case INIT_LIGHT:
		mode_manual_2 = RED;
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <fsm_for_manual_2+0x7c>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
		break;
 8000276:	e024      	b.n	80002c2 <fsm_for_manual_2+0x76>
	case RED:
		if(is_button_pressed(BUTTON_2)) mode_manual_2 = AMBER;
 8000278:	2001      	movs	r0, #1
 800027a:	f000 fa9b 	bl	80007b4 <is_button_pressed>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d002      	beq.n	800028a <fsm_for_manual_2+0x3e>
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <fsm_for_manual_2+0x7c>)
 8000286:	2202      	movs	r2, #2
 8000288:	701a      	strb	r2, [r3, #0]
		Light_2_Red();
 800028a:	f000 fcfd 	bl	8000c88 <Light_2_Red>
		break;
 800028e:	e018      	b.n	80002c2 <fsm_for_manual_2+0x76>
	case AMBER:
		if(is_button_pressed(BUTTON_2)) mode_manual_2 = GREEN;
 8000290:	2001      	movs	r0, #1
 8000292:	f000 fa8f 	bl	80007b4 <is_button_pressed>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d002      	beq.n	80002a2 <fsm_for_manual_2+0x56>
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <fsm_for_manual_2+0x7c>)
 800029e:	2203      	movs	r2, #3
 80002a0:	701a      	strb	r2, [r3, #0]
		Light_2_Amber();
 80002a2:	f000 fd01 	bl	8000ca8 <Light_2_Amber>
		break;
 80002a6:	e00c      	b.n	80002c2 <fsm_for_manual_2+0x76>
	case GREEN:
		if(is_button_pressed(BUTTON_2)) mode_manual_2 = RED;
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 fa83 	bl	80007b4 <is_button_pressed>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d002      	beq.n	80002ba <fsm_for_manual_2+0x6e>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <fsm_for_manual_2+0x7c>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
		Light_2_Green();
 80002ba:	f000 fd05 	bl	8000cc8 <Light_2_Green>
		break;
 80002be:	e000      	b.n	80002c2 <fsm_for_manual_2+0x76>
	default:
		break;
 80002c0:	bf00      	nop
	}
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200000ad 	.word	0x200000ad

080002cc <fsm_for_auto_1>:

void fsm_for_auto_1(void){				//this function is invoked every 1s
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	switch(mode_auto_1){
 80002d0:	4b2c      	ldr	r3, [pc, #176]	; (8000384 <fsm_for_auto_1+0xb8>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b03      	cmp	r3, #3
 80002d6:	d851      	bhi.n	800037c <fsm_for_auto_1+0xb0>
 80002d8:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <fsm_for_auto_1+0x14>)
 80002da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002de:	bf00      	nop
 80002e0:	080002f1 	.word	0x080002f1
 80002e4:	08000305 	.word	0x08000305
 80002e8:	0800032d 	.word	0x0800032d
 80002ec:	08000355 	.word	0x08000355
	case INIT_LIGHT:
		time_1 = TIME_RED;
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <fsm_for_auto_1+0xbc>)
 80002f2:	781a      	ldrb	r2, [r3, #0]
 80002f4:	4b25      	ldr	r3, [pc, #148]	; (800038c <fsm_for_auto_1+0xc0>)
 80002f6:	701a      	strb	r2, [r3, #0]
		Light_1_Red();
 80002f8:	f000 fc8a 	bl	8000c10 <Light_1_Red>
		mode_auto_1 = RED;
 80002fc:	4b21      	ldr	r3, [pc, #132]	; (8000384 <fsm_for_auto_1+0xb8>)
 80002fe:	2201      	movs	r2, #1
 8000300:	701a      	strb	r2, [r3, #0]
		break;
 8000302:	e03c      	b.n	800037e <fsm_for_auto_1+0xb2>
	case RED:
		if(time_1 == 0){
 8000304:	4b21      	ldr	r3, [pc, #132]	; (800038c <fsm_for_auto_1+0xc0>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d108      	bne.n	800031e <fsm_for_auto_1+0x52>
			time_1 = TIME_GREEN;
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <fsm_for_auto_1+0xc4>)
 800030e:	781a      	ldrb	r2, [r3, #0]
 8000310:	4b1e      	ldr	r3, [pc, #120]	; (800038c <fsm_for_auto_1+0xc0>)
 8000312:	701a      	strb	r2, [r3, #0]
			Light_1_Green();
 8000314:	f000 fca4 	bl	8000c60 <Light_1_Green>
			mode_auto_1 = GREEN;
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <fsm_for_auto_1+0xb8>)
 800031a:	2203      	movs	r2, #3
 800031c:	701a      	strb	r2, [r3, #0]
		}
		time_1--;
 800031e:	4b1b      	ldr	r3, [pc, #108]	; (800038c <fsm_for_auto_1+0xc0>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	3b01      	subs	r3, #1
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b19      	ldr	r3, [pc, #100]	; (800038c <fsm_for_auto_1+0xc0>)
 8000328:	701a      	strb	r2, [r3, #0]
		break;
 800032a:	e028      	b.n	800037e <fsm_for_auto_1+0xb2>
	case AMBER:
		if(time_1 == 0){
 800032c:	4b17      	ldr	r3, [pc, #92]	; (800038c <fsm_for_auto_1+0xc0>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d108      	bne.n	8000346 <fsm_for_auto_1+0x7a>
			time_1 = TIME_RED;
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <fsm_for_auto_1+0xbc>)
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <fsm_for_auto_1+0xc0>)
 800033a:	701a      	strb	r2, [r3, #0]
			Light_1_Red();
 800033c:	f000 fc68 	bl	8000c10 <Light_1_Red>
			mode_auto_1 = RED;
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <fsm_for_auto_1+0xb8>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
		}
		time_1--;
 8000346:	4b11      	ldr	r3, [pc, #68]	; (800038c <fsm_for_auto_1+0xc0>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <fsm_for_auto_1+0xc0>)
 8000350:	701a      	strb	r2, [r3, #0]
		break;
 8000352:	e014      	b.n	800037e <fsm_for_auto_1+0xb2>
	case GREEN:
		if(time_1 == 0){
 8000354:	4b0d      	ldr	r3, [pc, #52]	; (800038c <fsm_for_auto_1+0xc0>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d108      	bne.n	800036e <fsm_for_auto_1+0xa2>
			time_1 = TIME_AMBER;
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <fsm_for_auto_1+0xc8>)
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <fsm_for_auto_1+0xc0>)
 8000362:	701a      	strb	r2, [r3, #0]
			Light_1_Amber();
 8000364:	f000 fc68 	bl	8000c38 <Light_1_Amber>
			mode_auto_1 = AMBER;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <fsm_for_auto_1+0xb8>)
 800036a:	2202      	movs	r2, #2
 800036c:	701a      	strb	r2, [r3, #0]
		}
		time_1--;
 800036e:	4b07      	ldr	r3, [pc, #28]	; (800038c <fsm_for_auto_1+0xc0>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	3b01      	subs	r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <fsm_for_auto_1+0xc0>)
 8000378:	701a      	strb	r2, [r3, #0]
		break;
 800037a:	e000      	b.n	800037e <fsm_for_auto_1+0xb2>
	default:
		break;
 800037c:	bf00      	nop
	}
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200000ae 	.word	0x200000ae
 8000388:	20000000 	.word	0x20000000
 800038c:	200000b1 	.word	0x200000b1
 8000390:	20000002 	.word	0x20000002
 8000394:	20000001 	.word	0x20000001

08000398 <fsm_for_auto_2>:
void fsm_for_auto_2(void){				//this function is invoked every 1s
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	switch(mode_auto_2){
 800039c:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <fsm_for_auto_2+0xb8>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d851      	bhi.n	8000448 <fsm_for_auto_2+0xb0>
 80003a4:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <fsm_for_auto_2+0x14>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	080003d1 	.word	0x080003d1
 80003b4:	080003f9 	.word	0x080003f9
 80003b8:	08000421 	.word	0x08000421
	case INIT_LIGHT:
		time_2 = TIME_GREEN;
 80003bc:	4b25      	ldr	r3, [pc, #148]	; (8000454 <fsm_for_auto_2+0xbc>)
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <fsm_for_auto_2+0xc0>)
 80003c2:	701a      	strb	r2, [r3, #0]
		Light_2_Green();
 80003c4:	f000 fc80 	bl	8000cc8 <Light_2_Green>
		mode_auto_2 = GREEN;
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <fsm_for_auto_2+0xb8>)
 80003ca:	2203      	movs	r2, #3
 80003cc:	701a      	strb	r2, [r3, #0]
		break;
 80003ce:	e03c      	b.n	800044a <fsm_for_auto_2+0xb2>
	case RED:
		if(time_2 == 0){
 80003d0:	4b21      	ldr	r3, [pc, #132]	; (8000458 <fsm_for_auto_2+0xc0>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d108      	bne.n	80003ea <fsm_for_auto_2+0x52>
			time_2 = TIME_GREEN;
 80003d8:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <fsm_for_auto_2+0xbc>)
 80003da:	781a      	ldrb	r2, [r3, #0]
 80003dc:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <fsm_for_auto_2+0xc0>)
 80003de:	701a      	strb	r2, [r3, #0]
			Light_2_Green();
 80003e0:	f000 fc72 	bl	8000cc8 <Light_2_Green>
			mode_auto_2 = GREEN;
 80003e4:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <fsm_for_auto_2+0xb8>)
 80003e6:	2203      	movs	r2, #3
 80003e8:	701a      	strb	r2, [r3, #0]
		}
		time_2--;
 80003ea:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <fsm_for_auto_2+0xc0>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <fsm_for_auto_2+0xc0>)
 80003f4:	701a      	strb	r2, [r3, #0]
		break;
 80003f6:	e028      	b.n	800044a <fsm_for_auto_2+0xb2>
	case AMBER:
		if(time_2 == 0){
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <fsm_for_auto_2+0xc0>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d108      	bne.n	8000412 <fsm_for_auto_2+0x7a>
			time_2 = TIME_RED;
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <fsm_for_auto_2+0xc4>)
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <fsm_for_auto_2+0xc0>)
 8000406:	701a      	strb	r2, [r3, #0]
			Light_2_Red();
 8000408:	f000 fc3e 	bl	8000c88 <Light_2_Red>
			mode_auto_2 = RED;
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <fsm_for_auto_2+0xb8>)
 800040e:	2201      	movs	r2, #1
 8000410:	701a      	strb	r2, [r3, #0]
		}
		time_2--;
 8000412:	4b11      	ldr	r3, [pc, #68]	; (8000458 <fsm_for_auto_2+0xc0>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	3b01      	subs	r3, #1
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <fsm_for_auto_2+0xc0>)
 800041c:	701a      	strb	r2, [r3, #0]
		break;
 800041e:	e014      	b.n	800044a <fsm_for_auto_2+0xb2>
	case GREEN:
		if(time_2 == 0){
 8000420:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <fsm_for_auto_2+0xc0>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d108      	bne.n	800043a <fsm_for_auto_2+0xa2>
			time_2 = TIME_AMBER;
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <fsm_for_auto_2+0xc8>)
 800042a:	781a      	ldrb	r2, [r3, #0]
 800042c:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <fsm_for_auto_2+0xc0>)
 800042e:	701a      	strb	r2, [r3, #0]
			Light_2_Amber();
 8000430:	f000 fc3a 	bl	8000ca8 <Light_2_Amber>
			mode_auto_2 = AMBER;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <fsm_for_auto_2+0xb8>)
 8000436:	2202      	movs	r2, #2
 8000438:	701a      	strb	r2, [r3, #0]
		}
		time_2--;
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <fsm_for_auto_2+0xc0>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	3b01      	subs	r3, #1
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <fsm_for_auto_2+0xc0>)
 8000444:	701a      	strb	r2, [r3, #0]
		break;
 8000446:	e000      	b.n	800044a <fsm_for_auto_2+0xb2>
	default:
		break;
 8000448:	bf00      	nop
	}
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	200000af 	.word	0x200000af
 8000454:	20000002 	.word	0x20000002
 8000458:	200000b2 	.word	0x200000b2
 800045c:	20000000 	.word	0x20000000
 8000460:	20000001 	.word	0x20000001

08000464 <fsm_for_input_processing>:

void fsm_for_input_processing(void){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	switch(mode){
 8000468:	4b88      	ldr	r3, [pc, #544]	; (800068c <fsm_for_input_processing+0x228>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b06      	cmp	r3, #6
 800046e:	f200 80ff 	bhi.w	8000670 <fsm_for_input_processing+0x20c>
 8000472:	a201      	add	r2, pc, #4	; (adr r2, 8000478 <fsm_for_input_processing+0x14>)
 8000474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000478:	08000495 	.word	0x08000495
 800047c:	080004cd 	.word	0x080004cd
 8000480:	0800051b 	.word	0x0800051b
 8000484:	08000545 	.word	0x08000545
 8000488:	080005a3 	.word	0x080005a3
 800048c:	08000601 	.word	0x08000601
 8000490:	0800065f 	.word	0x0800065f
	case INIT:
		mode_auto_1 = INIT_LIGHT;
 8000494:	4b7e      	ldr	r3, [pc, #504]	; (8000690 <fsm_for_input_processing+0x22c>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
		mode_auto_2 = INIT_LIGHT;
 800049a:	4b7e      	ldr	r3, [pc, #504]	; (8000694 <fsm_for_input_processing+0x230>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
		index_task_temp_1 = SCH_Add_Task(fsm_for_auto_1, 0, 100);		//1000ms
 80004a0:	2264      	movs	r2, #100	; 0x64
 80004a2:	2100      	movs	r1, #0
 80004a4:	487c      	ldr	r0, [pc, #496]	; (8000698 <fsm_for_input_processing+0x234>)
 80004a6:	f000 fc59 	bl	8000d5c <SCH_Add_Task>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b7b      	ldr	r3, [pc, #492]	; (800069c <fsm_for_input_processing+0x238>)
 80004b0:	701a      	strb	r2, [r3, #0]
		index_task_temp_2 = SCH_Add_Task(fsm_for_auto_2, 0, 100);		//1000ms
 80004b2:	2264      	movs	r2, #100	; 0x64
 80004b4:	2100      	movs	r1, #0
 80004b6:	487a      	ldr	r0, [pc, #488]	; (80006a0 <fsm_for_input_processing+0x23c>)
 80004b8:	f000 fc50 	bl	8000d5c <SCH_Add_Task>
 80004bc:	4603      	mov	r3, r0
 80004be:	461a      	mov	r2, r3
 80004c0:	4b78      	ldr	r3, [pc, #480]	; (80006a4 <fsm_for_input_processing+0x240>)
 80004c2:	701a      	strb	r2, [r3, #0]
		mode = AUTO;
 80004c4:	4b71      	ldr	r3, [pc, #452]	; (800068c <fsm_for_input_processing+0x228>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
		break;
 80004ca:	e0dc      	b.n	8000686 <fsm_for_input_processing+0x222>
	case AUTO:

		UART_BUFFER[0] = time_1;
 80004cc:	4b76      	ldr	r3, [pc, #472]	; (80006a8 <fsm_for_input_processing+0x244>)
 80004ce:	781a      	ldrb	r2, [r3, #0]
 80004d0:	4b76      	ldr	r3, [pc, #472]	; (80006ac <fsm_for_input_processing+0x248>)
 80004d2:	701a      	strb	r2, [r3, #0]
		UART_BUFFER[1] = time_2;
 80004d4:	4b76      	ldr	r3, [pc, #472]	; (80006b0 <fsm_for_input_processing+0x24c>)
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	4b74      	ldr	r3, [pc, #464]	; (80006ac <fsm_for_input_processing+0x248>)
 80004da:	705a      	strb	r2, [r3, #1]

		if(is_button_pressed(PEDES_BUTTON) && (!is_P_Light_On)){
 80004dc:	2003      	movs	r0, #3
 80004de:	f000 f969 	bl	80007b4 <is_button_pressed>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d007      	beq.n	80004f8 <fsm_for_input_processing+0x94>
 80004e8:	4b72      	ldr	r3, [pc, #456]	; (80006b4 <fsm_for_input_processing+0x250>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d103      	bne.n	80004f8 <fsm_for_input_processing+0x94>
			mode = PEDESTRIAN;
 80004f0:	4b66      	ldr	r3, [pc, #408]	; (800068c <fsm_for_input_processing+0x228>)
 80004f2:	2206      	movs	r2, #6
 80004f4:	701a      	strb	r2, [r3, #0]
		else if(is_button_pressed(BUTTON_3)){
			SCH_Delete_Task_NAME(fsm_for_auto_1);
			SCH_Delete_Task_NAME(fsm_for_auto_2);
			mode = MANUAL;
		}
		break;
 80004f6:	e0bd      	b.n	8000674 <fsm_for_input_processing+0x210>
		else if(is_button_pressed(BUTTON_3)){
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 f95b 	bl	80007b4 <is_button_pressed>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	f000 80b7 	beq.w	8000674 <fsm_for_input_processing+0x210>
			SCH_Delete_Task_NAME(fsm_for_auto_1);
 8000506:	4864      	ldr	r0, [pc, #400]	; (8000698 <fsm_for_input_processing+0x234>)
 8000508:	f000 fd6a 	bl	8000fe0 <SCH_Delete_Task_NAME>
			SCH_Delete_Task_NAME(fsm_for_auto_2);
 800050c:	4864      	ldr	r0, [pc, #400]	; (80006a0 <fsm_for_input_processing+0x23c>)
 800050e:	f000 fd67 	bl	8000fe0 <SCH_Delete_Task_NAME>
			mode = MANUAL;
 8000512:	4b5e      	ldr	r3, [pc, #376]	; (800068c <fsm_for_input_processing+0x228>)
 8000514:	2202      	movs	r2, #2
 8000516:	701a      	strb	r2, [r3, #0]
		break;
 8000518:	e0ac      	b.n	8000674 <fsm_for_input_processing+0x210>
	case MANUAL:

		UART_BUFFER[0] = 0;
 800051a:	4b64      	ldr	r3, [pc, #400]	; (80006ac <fsm_for_input_processing+0x248>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
		UART_BUFFER[1] = 0;
 8000520:	4b62      	ldr	r3, [pc, #392]	; (80006ac <fsm_for_input_processing+0x248>)
 8000522:	2200      	movs	r2, #0
 8000524:	705a      	strb	r2, [r3, #1]
		fsm_for_manual_1();
 8000526:	f7ff fe51 	bl	80001cc <fsm_for_manual_1>
		fsm_for_manual_2();
 800052a:	f7ff fe8f 	bl	800024c <fsm_for_manual_2>

		if(is_button_pressed(BUTTON_3)){
 800052e:	2002      	movs	r0, #2
 8000530:	f000 f940 	bl	80007b4 <is_button_pressed>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	f000 809e 	beq.w	8000678 <fsm_for_input_processing+0x214>
			mode = MODI_RED;
 800053c:	4b53      	ldr	r3, [pc, #332]	; (800068c <fsm_for_input_processing+0x228>)
 800053e:	2203      	movs	r2, #3
 8000540:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000542:	e099      	b.n	8000678 <fsm_for_input_processing+0x214>
	case MODI_RED:

		UART_BUFFER[0] = TIME_RED;
 8000544:	4b5c      	ldr	r3, [pc, #368]	; (80006b8 <fsm_for_input_processing+0x254>)
 8000546:	781a      	ldrb	r2, [r3, #0]
 8000548:	4b58      	ldr	r3, [pc, #352]	; (80006ac <fsm_for_input_processing+0x248>)
 800054a:	701a      	strb	r2, [r3, #0]
		UART_BUFFER[1] = 11;
 800054c:	4b57      	ldr	r3, [pc, #348]	; (80006ac <fsm_for_input_processing+0x248>)
 800054e:	220b      	movs	r2, #11
 8000550:	705a      	strb	r2, [r3, #1]
		Light_1_Red();
 8000552:	f000 fb5d 	bl	8000c10 <Light_1_Red>
		Light_2_Red();
 8000556:	f000 fb97 	bl	8000c88 <Light_2_Red>

		if(is_button_pressed(BUTTON_1)){
 800055a:	2000      	movs	r0, #0
 800055c:	f000 f92a 	bl	80007b4 <is_button_pressed>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d006      	beq.n	8000574 <fsm_for_input_processing+0x110>
			TIME_RED++;
 8000566:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <fsm_for_input_processing+0x254>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b52      	ldr	r3, [pc, #328]	; (80006b8 <fsm_for_input_processing+0x254>)
 8000570:	701a      	strb	r2, [r3, #0]
			TIME_RED--;
		}
		else if(is_button_pressed(BUTTON_3)){
			mode = MODI_AMBER;
		}
		break;
 8000572:	e083      	b.n	800067c <fsm_for_input_processing+0x218>
		else if(is_button_pressed(BUTTON_2)){
 8000574:	2001      	movs	r0, #1
 8000576:	f000 f91d 	bl	80007b4 <is_button_pressed>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d006      	beq.n	800058e <fsm_for_input_processing+0x12a>
			TIME_RED--;
 8000580:	4b4d      	ldr	r3, [pc, #308]	; (80006b8 <fsm_for_input_processing+0x254>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b4b      	ldr	r3, [pc, #300]	; (80006b8 <fsm_for_input_processing+0x254>)
 800058a:	701a      	strb	r2, [r3, #0]
		break;
 800058c:	e076      	b.n	800067c <fsm_for_input_processing+0x218>
		else if(is_button_pressed(BUTTON_3)){
 800058e:	2002      	movs	r0, #2
 8000590:	f000 f910 	bl	80007b4 <is_button_pressed>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d070      	beq.n	800067c <fsm_for_input_processing+0x218>
			mode = MODI_AMBER;
 800059a:	4b3c      	ldr	r3, [pc, #240]	; (800068c <fsm_for_input_processing+0x228>)
 800059c:	2204      	movs	r2, #4
 800059e:	701a      	strb	r2, [r3, #0]
		break;
 80005a0:	e06c      	b.n	800067c <fsm_for_input_processing+0x218>
	case MODI_AMBER:

		UART_BUFFER[0] = TIME_AMBER;
 80005a2:	4b46      	ldr	r3, [pc, #280]	; (80006bc <fsm_for_input_processing+0x258>)
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	4b41      	ldr	r3, [pc, #260]	; (80006ac <fsm_for_input_processing+0x248>)
 80005a8:	701a      	strb	r2, [r3, #0]
		UART_BUFFER[1] = 22;
 80005aa:	4b40      	ldr	r3, [pc, #256]	; (80006ac <fsm_for_input_processing+0x248>)
 80005ac:	2216      	movs	r2, #22
 80005ae:	705a      	strb	r2, [r3, #1]
		Light_1_Amber();
 80005b0:	f000 fb42 	bl	8000c38 <Light_1_Amber>
		Light_2_Amber();
 80005b4:	f000 fb78 	bl	8000ca8 <Light_2_Amber>

		if(is_button_pressed(BUTTON_1)){
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f8fb 	bl	80007b4 <is_button_pressed>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d006      	beq.n	80005d2 <fsm_for_input_processing+0x16e>
			TIME_AMBER++;
 80005c4:	4b3d      	ldr	r3, [pc, #244]	; (80006bc <fsm_for_input_processing+0x258>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b3b      	ldr	r3, [pc, #236]	; (80006bc <fsm_for_input_processing+0x258>)
 80005ce:	701a      	strb	r2, [r3, #0]
			TIME_AMBER--;
		}
		else if(is_button_pressed(BUTTON_3)){
			mode = MODI_GREEN;
		}
		break;
 80005d0:	e056      	b.n	8000680 <fsm_for_input_processing+0x21c>
		else if(is_button_pressed(BUTTON_2)){
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 f8ee 	bl	80007b4 <is_button_pressed>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d006      	beq.n	80005ec <fsm_for_input_processing+0x188>
			TIME_AMBER--;
 80005de:	4b37      	ldr	r3, [pc, #220]	; (80006bc <fsm_for_input_processing+0x258>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <fsm_for_input_processing+0x258>)
 80005e8:	701a      	strb	r2, [r3, #0]
		break;
 80005ea:	e049      	b.n	8000680 <fsm_for_input_processing+0x21c>
		else if(is_button_pressed(BUTTON_3)){
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 f8e1 	bl	80007b4 <is_button_pressed>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d043      	beq.n	8000680 <fsm_for_input_processing+0x21c>
			mode = MODI_GREEN;
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <fsm_for_input_processing+0x228>)
 80005fa:	2205      	movs	r2, #5
 80005fc:	701a      	strb	r2, [r3, #0]
		break;
 80005fe:	e03f      	b.n	8000680 <fsm_for_input_processing+0x21c>
	case MODI_GREEN:

		UART_BUFFER[0] = TIME_GREEN;
 8000600:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <fsm_for_input_processing+0x25c>)
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <fsm_for_input_processing+0x248>)
 8000606:	701a      	strb	r2, [r3, #0]
		UART_BUFFER[1] = 33;
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <fsm_for_input_processing+0x248>)
 800060a:	2221      	movs	r2, #33	; 0x21
 800060c:	705a      	strb	r2, [r3, #1]
		Light_1_Green();
 800060e:	f000 fb27 	bl	8000c60 <Light_1_Green>
		Light_2_Green();
 8000612:	f000 fb59 	bl	8000cc8 <Light_2_Green>

		if(is_button_pressed(BUTTON_1)){
 8000616:	2000      	movs	r0, #0
 8000618:	f000 f8cc 	bl	80007b4 <is_button_pressed>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <fsm_for_input_processing+0x1cc>
			TIME_GREEN++;
 8000622:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <fsm_for_input_processing+0x25c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <fsm_for_input_processing+0x25c>)
 800062c:	701a      	strb	r2, [r3, #0]
			TIME_GREEN--;
		}
		else if(is_button_pressed(BUTTON_3)){
			mode = INIT;
		}
		break;
 800062e:	e029      	b.n	8000684 <fsm_for_input_processing+0x220>
		else if(is_button_pressed(BUTTON_2)){
 8000630:	2001      	movs	r0, #1
 8000632:	f000 f8bf 	bl	80007b4 <is_button_pressed>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d006      	beq.n	800064a <fsm_for_input_processing+0x1e6>
			TIME_GREEN--;
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <fsm_for_input_processing+0x25c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3b01      	subs	r3, #1
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <fsm_for_input_processing+0x25c>)
 8000646:	701a      	strb	r2, [r3, #0]
		break;
 8000648:	e01c      	b.n	8000684 <fsm_for_input_processing+0x220>
		else if(is_button_pressed(BUTTON_3)){
 800064a:	2002      	movs	r0, #2
 800064c:	f000 f8b2 	bl	80007b4 <is_button_pressed>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d016      	beq.n	8000684 <fsm_for_input_processing+0x220>
			mode = INIT;
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <fsm_for_input_processing+0x228>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
		break;
 800065c:	e012      	b.n	8000684 <fsm_for_input_processing+0x220>
	case PEDESTRIAN:

		SCH_Add_Task(Pedestrian_Control, 0, 1);
 800065e:	2201      	movs	r2, #1
 8000660:	2100      	movs	r1, #0
 8000662:	4818      	ldr	r0, [pc, #96]	; (80006c4 <fsm_for_input_processing+0x260>)
 8000664:	f000 fb7a 	bl	8000d5c <SCH_Add_Task>

		//Off P light after 2 cycles of traffic light
//		SCH_Add_Task(Delete_Pedestrian_Control, 2 * ( TIME_RED + TIME_GREEN + TIME_AMBER) / 10, 0);
		mode = AUTO;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <fsm_for_input_processing+0x228>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
		break;
 800066e:	e00a      	b.n	8000686 <fsm_for_input_processing+0x222>
	default:
		break;
 8000670:	bf00      	nop
 8000672:	e008      	b.n	8000686 <fsm_for_input_processing+0x222>
		break;
 8000674:	bf00      	nop
 8000676:	e006      	b.n	8000686 <fsm_for_input_processing+0x222>
		break;
 8000678:	bf00      	nop
 800067a:	e004      	b.n	8000686 <fsm_for_input_processing+0x222>
		break;
 800067c:	bf00      	nop
 800067e:	e002      	b.n	8000686 <fsm_for_input_processing+0x222>
		break;
 8000680:	bf00      	nop
 8000682:	e000      	b.n	8000686 <fsm_for_input_processing+0x222>
		break;
 8000684:	bf00      	nop
	}
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000b0 	.word	0x200000b0
 8000690:	200000ae 	.word	0x200000ae
 8000694:	200000af 	.word	0x200000af
 8000698:	080002cd 	.word	0x080002cd
 800069c:	200000b3 	.word	0x200000b3
 80006a0:	08000399 	.word	0x08000399
 80006a4:	200000b4 	.word	0x200000b4
 80006a8:	200000b1 	.word	0x200000b1
 80006ac:	200000b8 	.word	0x200000b8
 80006b0:	200000b2 	.word	0x200000b2
 80006b4:	200000b5 	.word	0x200000b5
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000001 	.word	0x20000001
 80006c0:	20000002 	.word	0x20000002
 80006c4:	08000195 	.word	0x08000195

080006c8 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void){
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 80006ce:	2300      	movs	r3, #0
 80006d0:	71fb      	strb	r3, [r7, #7]
 80006d2:	e057      	b.n	8000784 <button_reading+0xbc>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80006d4:	79fa      	ldrb	r2, [r7, #7]
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	492e      	ldr	r1, [pc, #184]	; (8000794 <button_reading+0xcc>)
 80006da:	5c89      	ldrb	r1, [r1, r2]
 80006dc:	4a2e      	ldr	r2, [pc, #184]	; (8000798 <button_reading+0xd0>)
 80006de:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4a2e      	ldr	r2, [pc, #184]	; (800079c <button_reading+0xd4>)
 80006e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	492d      	ldr	r1, [pc, #180]	; (80007a0 <button_reading+0xd8>)
 80006ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006f0:	79fc      	ldrb	r4, [r7, #7]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4610      	mov	r0, r2
 80006f6:	f001 fa39 	bl	8001b6c <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <button_reading+0xcc>)
 8000700:	551a      	strb	r2, [r3, r4]

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4a23      	ldr	r2, [pc, #140]	; (8000794 <button_reading+0xcc>)
 8000706:	5cd2      	ldrb	r2, [r2, r3]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4923      	ldr	r1, [pc, #140]	; (8000798 <button_reading+0xd0>)
 800070c:	5ccb      	ldrb	r3, [r1, r3]
 800070e:	429a      	cmp	r2, r3
 8000710:	d135      	bne.n	800077e <button_reading+0xb6>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	491f      	ldr	r1, [pc, #124]	; (8000794 <button_reading+0xcc>)
 8000718:	5c89      	ldrb	r1, [r1, r2]
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <button_reading+0xdc>)
 800071c:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <button_reading+0xdc>)
 8000722:	5cd3      	ldrb	r3, [r2, r3]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d114      	bne.n	8000752 <button_reading+0x8a>
			//if a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <button_reading+0xe0>)
 800072c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000730:	2b63      	cmp	r3, #99	; 0x63
 8000732:	d809      	bhi.n	8000748 <button_reading+0x80>
					counterForButtonPress1s[i]++;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <button_reading+0xe0>)
 8000738:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800073c:	3201      	adds	r2, #1
 800073e:	b291      	uxth	r1, r2
 8000740:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <button_reading+0xe0>)
 8000742:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000746:	e01a      	b.n	800077e <button_reading+0xb6>
				} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <button_reading+0xe4>)
 800074c:	2101      	movs	r1, #1
 800074e:	54d1      	strb	r1, [r2, r3]
 8000750:	e015      	b.n	800077e <button_reading+0xb6>
					//todo
				}
			} else {
				flagForButtonPress[i] = counterForButtonPress1s[i] > 0 ? 1 : 0;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <button_reading+0xe0>)
 8000756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075a:	2b00      	cmp	r3, #0
 800075c:	bf14      	ite	ne
 800075e:	2301      	movne	r3, #1
 8000760:	2300      	moveq	r3, #0
 8000762:	b2da      	uxtb	r2, r3
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4611      	mov	r1, r2
 8000768:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <button_reading+0xe8>)
 800076a:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[i] = 0;
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <button_reading+0xe0>)
 8000770:	2100      	movs	r1, #0
 8000772:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <button_reading+0xe4>)
 800077a:	2100      	movs	r1, #0
 800077c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	3301      	adds	r3, #1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d9a4      	bls.n	80006d4 <button_reading+0xc>
			}
		}
	}
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	200000bc 	.word	0x200000bc
 8000798:	200000c0 	.word	0x200000c0
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	20000004 	.word	0x20000004
 80007a4:	2000001c 	.word	0x2000001c
 80007a8:	200000cc 	.word	0x200000cc
 80007ac:	200000c8 	.word	0x200000c8
 80007b0:	200000c4 	.word	0x200000c4

080007b4 <is_button_pressed>:
		return (counterForButtonPress1s[index]);
	}
	return 0;
}

unsigned char is_button_pressed(unsigned char index){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d901      	bls.n	80007c8 <is_button_pressed+0x14>
 80007c4:	2300      	movs	r3, #0
 80007c6:	e002      	b.n	80007ce <is_button_pressed+0x1a>


	return (flagForButtonPress[index]);
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4a03      	ldr	r2, [pc, #12]	; (80007d8 <is_button_pressed+0x24>)
 80007cc:	5cd3      	ldrb	r3, [r2, r3]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	200000c4 	.word	0x200000c4

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fe28 	bl	8001434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f836 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 f962 	bl	8000ab0 <MX_GPIO_Init>
  MX_TIM3_Init();
 80007ec:	f000 f8c0 	bl	8000970 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80007f0:	f000 f934 	bl	8000a5c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007f4:	f000 f870 	bl	80008d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);			//timer2		clock 10ms
 80007f8:	4810      	ldr	r0, [pc, #64]	; (800083c <main+0x60>)
 80007fa:	f001 fe51 	bl	80024a0 <HAL_TIM_Base_Start_IT>
  	  	  	  	  	  	  	  	  	  	  	//pwm 			clock 1ms
  SCH_Init();
 80007fe:	f000 fa9b 	bl	8000d38 <SCH_Init>
  SCH_Add_Task(RunSoftwareTimer, 10, 1);				//10ms
 8000802:	2201      	movs	r2, #1
 8000804:	210a      	movs	r1, #10
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <main+0x64>)
 8000808:	f000 faa8 	bl	8000d5c <SCH_Add_Task>
  SCH_Add_Task(button_reading, 10, 1);					//10ms
 800080c:	2201      	movs	r2, #1
 800080e:	210a      	movs	r1, #10
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <main+0x68>)
 8000812:	f000 faa3 	bl	8000d5c <SCH_Add_Task>
  SCH_Add_Task(fsm_for_input_processing, 10, 1);		//10ms
 8000816:	2201      	movs	r2, #1
 8000818:	210a      	movs	r1, #10
 800081a:	480b      	ldr	r0, [pc, #44]	; (8000848 <main+0x6c>)
 800081c:	f000 fa9e 	bl	8000d5c <SCH_Add_Task>
  SCH_Add_Task(UART_Buffer_Transmit, 0, 50);			//500ms
 8000820:	2232      	movs	r2, #50	; 0x32
 8000822:	2100      	movs	r1, #0
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <main+0x70>)
 8000826:	f000 fa99 	bl	8000d5c <SCH_Add_Task>
  SCH_Add_Task(Buzzer_PWM_Control, 0, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	4808      	ldr	r0, [pc, #32]	; (8000850 <main+0x74>)
 8000830:	f000 fa94 	bl	8000d5c <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000834:	f000 fb42 	bl	8000ebc <SCH_Dispatch_Tasks>
 8000838:	e7fc      	b.n	8000834 <main+0x58>
 800083a:	bf00      	nop
 800083c:	200000d4 	.word	0x200000d4
 8000840:	08001025 	.word	0x08001025
 8000844:	080006c9 	.word	0x080006c9
 8000848:	08000465 	.word	0x08000465
 800084c:	08000b8d 	.word	0x08000b8d
 8000850:	08000be5 	.word	0x08000be5

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b090      	sub	sp, #64	; 0x40
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	2228      	movs	r2, #40	; 0x28
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f003 f950 	bl	8003b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087a:	2301      	movs	r3, #1
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	2310      	movs	r3, #16
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000886:	2300      	movs	r3, #0
 8000888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800088a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4618      	mov	r0, r3
 8000896:	f001 f999 	bl	8001bcc <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008a0:	f000 f9b0 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2102      	movs	r1, #2
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fc06 	bl	80020d0 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008ca:	f000 f99b 	bl	8000c04 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3740      	adds	r7, #64	; 0x40
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TIM2_Init+0x94>)
 80008f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_TIM2_Init+0x94>)
 80008fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000902:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_TIM2_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_TIM2_Init+0x94>)
 800090c:	223f      	movs	r2, #63	; 0x3f
 800090e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_TIM2_Init+0x94>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_TIM2_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_TIM2_Init+0x94>)
 800091e:	f001 fd6f 	bl	8002400 <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000928:	f000 f96c 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_TIM2_Init+0x94>)
 800093a:	f002 f81b 	bl	8002974 <HAL_TIM_ConfigClockSource>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000944:	f000 f95e 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_TIM2_Init+0x94>)
 8000956:	f002 fb6b 	bl	8003030 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 f950 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000d4 	.word	0x200000d4

08000970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	; 0x38
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a0:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <MX_TIM3_Init+0xe4>)
 80009a2:	4a2d      	ldr	r2, [pc, #180]	; (8000a58 <MX_TIM3_Init+0xe8>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_TIM3_Init+0xe4>)
 80009a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <MX_TIM3_Init+0xe4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_TIM3_Init+0xe4>)
 80009b6:	223f      	movs	r2, #63	; 0x3f
 80009b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <MX_TIM3_Init+0xe4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_TIM3_Init+0xe4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009c6:	4823      	ldr	r0, [pc, #140]	; (8000a54 <MX_TIM3_Init+0xe4>)
 80009c8:	f001 fd1a 	bl	8002400 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009d2:	f000 f917 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e0:	4619      	mov	r1, r3
 80009e2:	481c      	ldr	r0, [pc, #112]	; (8000a54 <MX_TIM3_Init+0xe4>)
 80009e4:	f001 ffc6 	bl	8002974 <HAL_TIM_ConfigClockSource>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009ee:	f000 f909 	bl	8000c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009f2:	4818      	ldr	r0, [pc, #96]	; (8000a54 <MX_TIM3_Init+0xe4>)
 80009f4:	f001 fda0 	bl	8002538 <HAL_TIM_PWM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009fe:	f000 f901 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <MX_TIM3_Init+0xe4>)
 8000a12:	f002 fb0d 	bl	8003030 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a1c:	f000 f8f2 	bl	8000c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a20:	2360      	movs	r3, #96	; 0x60
 8000a22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <MX_TIM3_Init+0xe4>)
 8000a38:	f001 fede 	bl	80027f8 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a42:	f000 f8df 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <MX_TIM3_Init+0xe4>)
 8000a48:	f000 fbc8 	bl	80011dc <HAL_TIM_MspPostInit>

}
 8000a4c:	bf00      	nop
 8000a4e:	3738      	adds	r7, #56	; 0x38
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000011c 	.word	0x2000011c
 8000a58:	40000400 	.word	0x40000400

08000a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MX_USART2_UART_Init+0x50>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a94:	f002 fb36 	bl	8003104 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a9e:	f000 f8b1 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000164 	.word	0x20000164
 8000aac:	40004400 	.word	0x40004400

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <MX_GPIO_Init+0xd0>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a2d      	ldr	r2, [pc, #180]	; (8000b80 <MX_GPIO_Init+0xd0>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <MX_GPIO_Init+0xd0>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_GPIO_Init+0xd0>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <MX_GPIO_Init+0xd0>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <MX_GPIO_Init+0xd0>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0308 	and.w	r3, r3, #8
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_Light_a_Pin|T_Light_1_b_Pin|T_Light_2_b_Pin|T_Light_2_a_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000afa:	4822      	ldr	r0, [pc, #136]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000afc:	f001 f84d 	bl	8001b9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P_Light_b_Pin|T_Light_1_a_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b06:	4820      	ldr	r0, [pc, #128]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000b08:	f001 f847 	bl	8001b9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Pedestrian_Button_Pin Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Pedestrian_Button_Pin|Button_1_Pin|Button_2_Pin;
 8000b0c:	2313      	movs	r3, #19
 8000b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481a      	ldr	r0, [pc, #104]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000b20:	f000 fea8 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b24:	2301      	movs	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000b38:	f000 fe9c 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_Light_a_Pin T_Light_1_b_Pin T_Light_2_b_Pin T_Light_2_a_Pin */
  GPIO_InitStruct.Pin = P_Light_a_Pin|T_Light_1_b_Pin|T_Light_2_b_Pin|T_Light_2_a_Pin;
 8000b3c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4619      	mov	r1, r3
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000b56:	f000 fe8d 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_Light_b_Pin T_Light_1_a_Pin */
  GPIO_InitStruct.Pin = P_Light_b_Pin|T_Light_1_a_Pin;
 8000b5a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	4619      	mov	r1, r3
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000b74:	f000 fe7e 	bl	8001874 <HAL_GPIO_Init>

}
 8000b78:	bf00      	nop
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	40010800 	.word	0x40010800

08000b8c <UART_Buffer_Transmit>:

/* USER CODE BEGIN 4 */
uint8_t str[50];

void UART_Buffer_Transmit(void){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, str, sprintf(str, "!time1: %d#", UART_BUFFER[0]), 1000);
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <UART_Buffer_Transmit+0x44>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	490f      	ldr	r1, [pc, #60]	; (8000bd4 <UART_Buffer_Transmit+0x48>)
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <UART_Buffer_Transmit+0x4c>)
 8000b9a:	f002 ffbd 	bl	8003b18 <siprintf>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <UART_Buffer_Transmit+0x4c>)
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <UART_Buffer_Transmit+0x50>)
 8000baa:	f002 faf8 	bl	800319e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str, sprintf(str, "!time2: %d#", UART_BUFFER[1]), 1000);
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <UART_Buffer_Transmit+0x44>)
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	490a      	ldr	r1, [pc, #40]	; (8000be0 <UART_Buffer_Transmit+0x54>)
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <UART_Buffer_Transmit+0x4c>)
 8000bb8:	f002 ffae 	bl	8003b18 <siprintf>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc4:	4904      	ldr	r1, [pc, #16]	; (8000bd8 <UART_Buffer_Transmit+0x4c>)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <UART_Buffer_Transmit+0x50>)
 8000bc8:	f002 fae9 	bl	800319e <HAL_UART_Transmit>

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000b8 	.word	0x200000b8
 8000bd4:	08004424 	.word	0x08004424
 8000bd8:	200001a8 	.word	0x200001a8
 8000bdc:	20000164 	.word	0x20000164
 8000be0:	08004430 	.word	0x08004430

08000be4 <Buzzer_PWM_Control>:

void Buzzer_PWM_Control(void){
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, BUZZER_VOLUME);
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <Buzzer_PWM_Control+0x18>)
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <Buzzer_PWM_Control+0x1c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200000b6 	.word	0x200000b6
 8000c00:	2000011c 	.word	0x2000011c

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <Light_1_Red>:
 */

#include "output_control.h"


void Light_1_Red(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_1_a_GPIO_Port, T_Light_1_a_Pin, SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <Light_1_Red+0x20>)
 8000c1c:	f000 ffbd 	bl	8001b9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_1_b_GPIO_Port, T_Light_1_b_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2108      	movs	r1, #8
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <Light_1_Red+0x24>)
 8000c26:	f000 ffb8 	bl	8001b9a <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40010c00 	.word	0x40010c00

08000c38 <Light_1_Amber>:
void Light_1_Amber(void){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_1_a_GPIO_Port, T_Light_1_a_Pin, RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <Light_1_Amber+0x20>)
 8000c44:	f000 ffa9 	bl	8001b9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_1_b_GPIO_Port, T_Light_1_b_Pin, SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <Light_1_Amber+0x24>)
 8000c4e:	f000 ffa4 	bl	8001b9a <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	40010c00 	.word	0x40010c00

08000c60 <Light_1_Green>:
void Light_1_Green(void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_1_a_GPIO_Port, T_Light_1_a_Pin, SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <Light_1_Green+0x20>)
 8000c6c:	f000 ff95 	bl	8001b9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_1_b_GPIO_Port, T_Light_1_b_Pin, SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2108      	movs	r1, #8
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <Light_1_Green+0x24>)
 8000c76:	f000 ff90 	bl	8001b9a <HAL_GPIO_WritePin>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010800 	.word	0x40010800
 8000c84:	40010c00 	.word	0x40010c00

08000c88 <Light_2_Red>:

void Light_2_Red(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_2_a_GPIO_Port, T_Light_2_a_Pin, SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2120      	movs	r1, #32
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <Light_2_Red+0x1c>)
 8000c92:	f000 ff82 	bl	8001b9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_2_b_GPIO_Port, T_Light_2_b_Pin, RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2110      	movs	r1, #16
 8000c9a:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <Light_2_Red+0x1c>)
 8000c9c:	f000 ff7d 	bl	8001b9a <HAL_GPIO_WritePin>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010c00 	.word	0x40010c00

08000ca8 <Light_2_Amber>:
void Light_2_Amber(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_2_a_GPIO_Port, T_Light_2_a_Pin, RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2120      	movs	r1, #32
 8000cb0:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <Light_2_Amber+0x1c>)
 8000cb2:	f000 ff72 	bl	8001b9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_2_b_GPIO_Port, T_Light_2_b_Pin, SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2110      	movs	r1, #16
 8000cba:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <Light_2_Amber+0x1c>)
 8000cbc:	f000 ff6d 	bl	8001b9a <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40010c00 	.word	0x40010c00

08000cc8 <Light_2_Green>:
void Light_2_Green(void){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_2_a_GPIO_Port, T_Light_2_a_Pin, SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2120      	movs	r1, #32
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <Light_2_Green+0x1c>)
 8000cd2:	f000 ff62 	bl	8001b9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_2_b_GPIO_Port, T_Light_2_b_Pin, SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2110      	movs	r1, #16
 8000cda:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <Light_2_Green+0x1c>)
 8000cdc:	f000 ff5d 	bl	8001b9a <HAL_GPIO_WritePin>
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <Light_P_Red>:

void Light_P_Off(void){
	HAL_GPIO_WritePin(P_Light_a_GPIO_Port, P_Light_a_Pin, RESET);
	HAL_GPIO_WritePin(P_Light_b_GPIO_Port, P_Light_b_Pin, RESET);
}
void Light_P_Red(void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_Light_a_GPIO_Port, P_Light_a_Pin, SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <Light_P_Red+0x20>)
 8000cf4:	f000 ff51 	bl	8001b9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_Light_b_GPIO_Port, P_Light_b_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfe:	4803      	ldr	r0, [pc, #12]	; (8000d0c <Light_P_Red+0x24>)
 8000d00:	f000 ff4b 	bl	8001b9a <HAL_GPIO_WritePin>

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40010c00 	.word	0x40010c00
 8000d0c:	40010800 	.word	0x40010800

08000d10 <Light_P_Green>:
void Light_P_Amber(void){
	HAL_GPIO_WritePin(P_Light_a_GPIO_Port, P_Light_a_Pin, RESET);
	HAL_GPIO_WritePin(P_Light_b_GPIO_Port, P_Light_b_Pin, SET);
}
void Light_P_Green(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_Light_a_GPIO_Port, P_Light_a_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <Light_P_Green+0x20>)
 8000d1c:	f000 ff3d 	bl	8001b9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_Light_b_GPIO_Port, P_Light_b_Pin, SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d26:	4803      	ldr	r0, [pc, #12]	; (8000d34 <Light_P_Green+0x24>)
 8000d28:	f000 ff37 	bl	8001b9a <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010c00 	.word	0x40010c00
 8000d34:	40010800 	.word	0x40010800

08000d38 <SCH_Init>:

#include "scheduler.h"

static sTasks SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void){
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	e002      	b.n	8000d4a <SCH_Init+0x12>
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	3301      	adds	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b27      	cmp	r3, #39	; 0x27
 8000d4e:	d9f9      	bls.n	8000d44 <SCH_Init+0xc>

	}
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <SCH_Add_Task>:

uint8_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
	uint8_t index = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	75fb      	strb	r3, [r7, #23]
	while( (SCH_tasks_G[index].pTask != 0) && (index < SCH_MAX_TASKS) ){
 8000d6c:	e002      	b.n	8000d74 <SCH_Add_Task+0x18>
		index++;
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
 8000d70:	3301      	adds	r3, #1
 8000d72:	75fb      	strb	r3, [r7, #23]
	while( (SCH_tasks_G[index].pTask != 0) && (index < SCH_MAX_TASKS) ){
 8000d74:	7dfa      	ldrb	r2, [r7, #23]
 8000d76:	491f      	ldr	r1, [pc, #124]	; (8000df4 <SCH_Add_Task+0x98>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <SCH_Add_Task+0x32>
 8000d88:	7dfb      	ldrb	r3, [r7, #23]
 8000d8a:	2b27      	cmp	r3, #39	; 0x27
 8000d8c:	d9ef      	bls.n	8000d6e <SCH_Add_Task+0x12>
	}

//	if index == MAX_TASKS => list is full
	if(index == SCH_MAX_TASKS){
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	2b28      	cmp	r3, #40	; 0x28
 8000d92:	d101      	bne.n	8000d98 <SCH_Add_Task+0x3c>
		return SCH_MAX_TASKS;
 8000d94:	2328      	movs	r3, #40	; 0x28
 8000d96:	e027      	b.n	8000de8 <SCH_Add_Task+0x8c>
	}

//	there is a space in the task array
	SCH_tasks_G[index].pTask 	= pFunction;
 8000d98:	7dfa      	ldrb	r2, [r7, #23]
 8000d9a:	4916      	ldr	r1, [pc, #88]	; (8000df4 <SCH_Add_Task+0x98>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay 	= DELAY;
 8000daa:	7dfa      	ldrb	r2, [r7, #23]
 8000dac:	4911      	ldr	r1, [pc, #68]	; (8000df4 <SCH_Add_Task+0x98>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	3304      	adds	r3, #4
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period 	= PERIOD;
 8000dbe:	7dfa      	ldrb	r2, [r7, #23]
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <SCH_Add_Task+0x98>)
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	3308      	adds	r3, #8
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].RunMe 	= 0;
 8000dd2:	7dfa      	ldrb	r2, [r7, #23]
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <SCH_Add_Task+0x98>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	440b      	add	r3, r1
 8000de0:	330c      	adds	r3, #12
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
	return index;
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200001dc 	.word	0x200001dc

08000df8 <SCH_Update>:

void SCH_Update(void){
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
	uint8_t index;
//	NOTE: calculations are in STICKS (NOT milliseconds)
	for(index = 0; index < SCH_MAX_TASKS; index++){
 8000dfe:	2300      	movs	r3, #0
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e050      	b.n	8000ea6 <SCH_Update+0xae>
//		check if there is a task at this location
		if(SCH_tasks_G[index].pTask){
 8000e04:	79fa      	ldrb	r2, [r7, #7]
 8000e06:	492c      	ldr	r1, [pc, #176]	; (8000eb8 <SCH_Update+0xc0>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d043      	beq.n	8000ea0 <SCH_Update+0xa8>
			if(SCH_tasks_G[index].Delay == 0){
 8000e18:	79fa      	ldrb	r2, [r7, #7]
 8000e1a:	4927      	ldr	r1, [pc, #156]	; (8000eb8 <SCH_Update+0xc0>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	3304      	adds	r3, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d126      	bne.n	8000e7c <SCH_Update+0x84>
//				increase RunMe flag
				SCH_tasks_G[index].RunMe++;
 8000e2e:	79fa      	ldrb	r2, [r7, #7]
 8000e30:	4921      	ldr	r1, [pc, #132]	; (8000eb8 <SCH_Update+0xc0>)
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	330c      	adds	r3, #12
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	b2d8      	uxtb	r0, r3
 8000e44:	491c      	ldr	r1, [pc, #112]	; (8000eb8 <SCH_Update+0xc0>)
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	330c      	adds	r3, #12
 8000e52:	4602      	mov	r2, r0
 8000e54:	701a      	strb	r2, [r3, #0]

//				if(SCH_tasks_G[index]. Period){
					SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
 8000e56:	79f9      	ldrb	r1, [r7, #7]
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <SCH_Update+0xc0>)
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4403      	add	r3, r0
 8000e66:	3308      	adds	r3, #8
 8000e68:	6819      	ldr	r1, [r3, #0]
 8000e6a:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <SCH_Update+0xc0>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4403      	add	r3, r0
 8000e76:	3304      	adds	r3, #4
 8000e78:	6019      	str	r1, [r3, #0]
 8000e7a:	e011      	b.n	8000ea0 <SCH_Update+0xa8>
//				}
			}
			else{
//				delay > 0
				SCH_tasks_G[index].Delay--;
 8000e7c:	79fa      	ldrb	r2, [r7, #7]
 8000e7e:	490e      	ldr	r1, [pc, #56]	; (8000eb8 <SCH_Update+0xc0>)
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1e59      	subs	r1, r3, #1
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <SCH_Update+0xc0>)
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4403      	add	r3, r0
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	6019      	str	r1, [r3, #0]
	for(index = 0; index < SCH_MAX_TASKS; index++){
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b27      	cmp	r3, #39	; 0x27
 8000eaa:	d9ab      	bls.n	8000e04 <SCH_Update+0xc>
			}
		}
	}
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	200001dc 	.word	0x200001dc

08000ebc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	uint8_t index;
	for(index = 0; index < SCH_MAX_TASKS; index++){
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	e039      	b.n	8000f3c <SCH_Dispatch_Tasks+0x80>
		if(SCH_tasks_G[index].RunMe > 0){
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	4920      	ldr	r1, [pc, #128]	; (8000f4c <SCH_Dispatch_Tasks+0x90>)
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	330c      	adds	r3, #12
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d02b      	beq.n	8000f36 <SCH_Dispatch_Tasks+0x7a>
//			run the task
			(*SCH_tasks_G[index].pTask)();
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	491a      	ldr	r1, [pc, #104]	; (8000f4c <SCH_Dispatch_Tasks+0x90>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4798      	blx	r3
			SCH_tasks_G[index].RunMe--;
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	4916      	ldr	r1, [pc, #88]	; (8000f4c <SCH_Dispatch_Tasks+0x90>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	330c      	adds	r3, #12
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	b2d8      	uxtb	r0, r3
 8000f06:	4911      	ldr	r1, [pc, #68]	; (8000f4c <SCH_Dispatch_Tasks+0x90>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	330c      	adds	r3, #12
 8000f14:	4602      	mov	r2, r0
 8000f16:	701a      	strb	r2, [r3, #0]

			//if period == 0 => one shot task => delete after run
			if(SCH_tasks_G[index].Period == 0){
 8000f18:	79fa      	ldrb	r2, [r7, #7]
 8000f1a:	490c      	ldr	r1, [pc, #48]	; (8000f4c <SCH_Dispatch_Tasks+0x90>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	3308      	adds	r3, #8
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d103      	bne.n	8000f36 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(index);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f80d 	bl	8000f50 <SCH_Delete_Task>
	for(index = 0; index < SCH_MAX_TASKS; index++){
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b27      	cmp	r3, #39	; 0x27
 8000f40:	d9c2      	bls.n	8000ec8 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200001dc 	.word	0x200001dc

08000f50 <SCH_Delete_Task>:


void SCH_Delete_Task(const uint8_t index){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	if(SCH_tasks_G[index].pTask == 0){
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	491f      	ldr	r1, [pc, #124]	; (8000fdc <SCH_Delete_Task+0x8c>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d031      	beq.n	8000fd2 <SCH_Delete_Task+0x82>
//		no task at this location
		return;
	}
	SCH_tasks_G[index].pTask 	= 0x0000;
 8000f6e:	79fa      	ldrb	r2, [r7, #7]
 8000f70:	491a      	ldr	r1, [pc, #104]	; (8000fdc <SCH_Delete_Task+0x8c>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay 	= 0;
 8000f80:	79fa      	ldrb	r2, [r7, #7]
 8000f82:	4916      	ldr	r1, [pc, #88]	; (8000fdc <SCH_Delete_Task+0x8c>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3304      	adds	r3, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period 	= 0;
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	4911      	ldr	r1, [pc, #68]	; (8000fdc <SCH_Delete_Task+0x8c>)
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].RunMe 	= 0;
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	490c      	ldr	r1, [pc, #48]	; (8000fdc <SCH_Delete_Task+0x8c>)
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	330c      	adds	r3, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[index].TaskID 	= 0x0000;
 8000fbc:	79fa      	ldrb	r2, [r7, #7]
 8000fbe:	4907      	ldr	r1, [pc, #28]	; (8000fdc <SCH_Delete_Task+0x8c>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	3310      	adds	r3, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e000      	b.n	8000fd4 <SCH_Delete_Task+0x84>
		return;
 8000fd2:	bf00      	nop
}
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	200001dc 	.word	0x200001dc

08000fe0 <SCH_Delete_Task_NAME>:

void SCH_Delete_Task_NAME(	void (*pTask) (void) ){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < SCH_MAX_TASKS; i++){
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e012      	b.n	8001014 <SCH_Delete_Task_NAME+0x34>
		if(SCH_tasks_G[i].pTask == pTask){
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	490b      	ldr	r1, [pc, #44]	; (8001020 <SCH_Delete_Task_NAME+0x40>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	d104      	bne.n	800100e <SCH_Delete_Task_NAME+0x2e>
			SCH_Delete_Task(i);
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ffa2 	bl	8000f50 <SCH_Delete_Task>
			return;
 800100c:	e005      	b.n	800101a <SCH_Delete_Task_NAME+0x3a>
	for(uint8_t i = 0; i < SCH_MAX_TASKS; i++){
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b27      	cmp	r3, #39	; 0x27
 8001018:	d9e9      	bls.n	8000fee <SCH_Delete_Task_NAME+0xe>
		}
	}
}
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200001dc 	.word	0x200001dc

08001024 <RunSoftwareTimer>:
void SetTimer_3(uint16_t duration){
	counter_timer_3 = duration / TIME_CYCLE;
	flag_timer_3 = 0;
}

void RunSoftwareTimer(void){
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
	if(counter_timer_0 > 0){
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <RunSoftwareTimer+0x94>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00c      	beq.n	800104a <RunSoftwareTimer+0x26>
		counter_timer_0--;
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <RunSoftwareTimer+0x94>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	3b01      	subs	r3, #1
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <RunSoftwareTimer+0x94>)
 800103a:	701a      	strb	r2, [r3, #0]
		if(counter_timer_0 == 0){
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <RunSoftwareTimer+0x94>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <RunSoftwareTimer+0x26>
			flag_timer_0 = 1;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <RunSoftwareTimer+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
		}
	}
	if(counter_timer_1 > 0){
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <RunSoftwareTimer+0x9c>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00c      	beq.n	800106c <RunSoftwareTimer+0x48>
		counter_timer_1--;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <RunSoftwareTimer+0x9c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	3b01      	subs	r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <RunSoftwareTimer+0x9c>)
 800105c:	701a      	strb	r2, [r3, #0]
		if(counter_timer_1 == 0){
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <RunSoftwareTimer+0x9c>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <RunSoftwareTimer+0x48>
			flag_timer_1 = 1;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <RunSoftwareTimer+0xa0>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
		}
	}
	if(counter_timer_2 > 0){
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <RunSoftwareTimer+0xa4>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00c      	beq.n	800108e <RunSoftwareTimer+0x6a>
		counter_timer_2--;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <RunSoftwareTimer+0xa4>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <RunSoftwareTimer+0xa4>)
 800107e:	701a      	strb	r2, [r3, #0]
		if(counter_timer_2 == 0){
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <RunSoftwareTimer+0xa4>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <RunSoftwareTimer+0x6a>
			flag_timer_2 = 1;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <RunSoftwareTimer+0xa8>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
		}
	}
	if(counter_timer_3 > 0){
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <RunSoftwareTimer+0xac>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00c      	beq.n	80010b0 <RunSoftwareTimer+0x8c>
		counter_timer_3--;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <RunSoftwareTimer+0xac>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	3b01      	subs	r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <RunSoftwareTimer+0xac>)
 80010a0:	701a      	strb	r2, [r3, #0]
		if(counter_timer_3 == 0){
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <RunSoftwareTimer+0xac>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <RunSoftwareTimer+0x8c>
			flag_timer_3 = 1;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <RunSoftwareTimer+0xb0>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	200004fd 	.word	0x200004fd
 80010bc:	200004fc 	.word	0x200004fc
 80010c0:	200004ff 	.word	0x200004ff
 80010c4:	200004fe 	.word	0x200004fe
 80010c8:	20000501 	.word	0x20000501
 80010cc:	20000500 	.word	0x20000500
 80010d0:	20000503 	.word	0x20000503
 80010d4:	20000502 	.word	0x20000502

080010d8 <HAL_TIM_PeriodElapsedCallback>:

uint8_t FlagTimer_3(void){
	return flag_timer_3;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e8:	d101      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 80010ea:	f7ff fe85 	bl	8000df8 <SCH_Update>
	}
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_MspInit+0x5c>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a14      	ldr	r2, [pc, #80]	; (8001154 <HAL_MspInit+0x5c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_MspInit+0x5c>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_MspInit+0x5c>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <HAL_MspInit+0x5c>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_MspInit+0x5c>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_MspInit+0x60>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_MspInit+0x60>)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000

0800115c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116c:	d114      	bne.n	8001198 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_TIM_Base_MspInit+0x78>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_TIM_Base_MspInit+0x78>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_TIM_Base_MspInit+0x78>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	201c      	movs	r0, #28
 800118c:	f000 fa8b 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001190:	201c      	movs	r0, #28
 8001192:	f000 faa4 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001196:	e018      	b.n	80011ca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_TIM_Base_MspInit+0x7c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d113      	bne.n	80011ca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_TIM_Base_MspInit+0x78>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_TIM_Base_MspInit+0x78>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	61d3      	str	r3, [r2, #28]
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_TIM_Base_MspInit+0x78>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	201d      	movs	r0, #29
 80011c0:	f000 fa71 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011c4:	201d      	movs	r0, #29
 80011c6:	f000 fa8a 	bl	80016de <HAL_NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40000400 	.word	0x40000400

080011dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <HAL_TIM_MspPostInit+0x58>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d117      	bne.n	800122c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_TIM_MspPostInit+0x5c>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_TIM_MspPostInit+0x5c>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_TIM_MspPostInit+0x5c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001214:	2340      	movs	r3, #64	; 0x40
 8001216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2302      	movs	r3, #2
 800121e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <HAL_TIM_MspPostInit+0x60>)
 8001228:	f000 fb24 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40000400 	.word	0x40000400
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a1f      	ldr	r2, [pc, #124]	; (80012d8 <HAL_UART_MspInit+0x98>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d137      	bne.n	80012d0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <HAL_UART_MspInit+0x9c>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_UART_MspInit+0x9c>)
 8001266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126a:	61d3      	str	r3, [r2, #28]
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_UART_MspInit+0x9c>)
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_UART_MspInit+0x9c>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_UART_MspInit+0x9c>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_UART_MspInit+0x9c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001290:	2304      	movs	r3, #4
 8001292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4619      	mov	r1, r3
 80012a2:	480f      	ldr	r0, [pc, #60]	; (80012e0 <HAL_UART_MspInit+0xa0>)
 80012a4:	f000 fae6 	bl	8001874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012a8:	2308      	movs	r3, #8
 80012aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <HAL_UART_MspInit+0xa0>)
 80012bc:	f000 fada 	bl	8001874 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2026      	movs	r0, #38	; 0x26
 80012c6:	f000 f9ee 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ca:	2026      	movs	r0, #38	; 0x26
 80012cc:	f000 fa07 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40004400 	.word	0x40004400
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010800 	.word	0x40010800

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>

080012f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <UsageFault_Handler+0x4>

08001302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132a:	f000 f8c9 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <TIM2_IRQHandler+0x10>)
 800133a:	f001 f955 	bl	80025e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200000d4 	.word	0x200000d4

08001348 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <TIM3_IRQHandler+0x10>)
 800134e:	f001 f94b 	bl	80025e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000011c 	.word	0x2000011c

0800135c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <USART2_IRQHandler+0x10>)
 8001362:	f001 ffaf 	bl	80032c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000164 	.word	0x20000164

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f002 fb88 	bl	8003ab4 <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20002800 	.word	0x20002800
 80013d0:	00000400 	.word	0x00000400
 80013d4:	20000504 	.word	0x20000504
 80013d8:	20000520 	.word	0x20000520

080013dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	; (8001420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	; (800142c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800140e:	f7ff ffe5 	bl	80013dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001412:	f002 fb55 	bl	8003ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001416:	f7ff f9e1 	bl	80007dc <main>
  bx lr
 800141a:	4770      	bx	lr
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001424:	080044a0 	.word	0x080044a0
  ldr r2, =_sbss
 8001428:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800142c:	2000051c 	.word	0x2000051c

08001430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC1_2_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_Init+0x28>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_Init+0x28>)
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 f923 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144a:	200f      	movs	r0, #15
 800144c:	f000 f808 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f7ff fe52 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40022000 	.word	0x40022000

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x54>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x58>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f93b 	bl	80016fa <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00e      	b.n	80014ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d80a      	bhi.n	80014aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f000 f903 	bl	80016a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <HAL_InitTick+0x5c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000020 	.word	0x20000020
 80014b8:	20000028 	.word	0x20000028
 80014bc:	20000024 	.word	0x20000024

080014c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_IncTick+0x1c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_IncTick+0x20>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a03      	ldr	r2, [pc, #12]	; (80014e0 <HAL_IncTick+0x20>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000028 	.word	0x20000028
 80014e0:	20000508 	.word	0x20000508

080014e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <HAL_GetTick+0x10>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	20000508 	.word	0x20000508

080014f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4906      	ldr	r1, [pc, #24]	; (8001590 <__NVIC_EnableIRQ+0x34>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff90 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff2d 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff42 	bl	8001540 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff35 	bl	800155c <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa2 	bl	800164c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001724:	2b02      	cmp	r3, #2
 8001726:	d008      	beq.n	800173a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2204      	movs	r2, #4
 800172c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e020      	b.n	800177c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 020e 	bic.w	r2, r2, #14
 8001748:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0201 	bic.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
	...

08001788 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800179a:	2b02      	cmp	r3, #2
 800179c:	d005      	beq.n	80017aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2204      	movs	r2, #4
 80017a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e051      	b.n	800184e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 020e 	bic.w	r2, r2, #14
 80017b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0201 	bic.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a22      	ldr	r2, [pc, #136]	; (8001858 <HAL_DMA_Abort_IT+0xd0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d029      	beq.n	8001828 <HAL_DMA_Abort_IT+0xa0>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a20      	ldr	r2, [pc, #128]	; (800185c <HAL_DMA_Abort_IT+0xd4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d022      	beq.n	8001824 <HAL_DMA_Abort_IT+0x9c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <HAL_DMA_Abort_IT+0xd8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d01a      	beq.n	800181e <HAL_DMA_Abort_IT+0x96>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_DMA_Abort_IT+0xdc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d012      	beq.n	8001818 <HAL_DMA_Abort_IT+0x90>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_DMA_Abort_IT+0xe0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d00a      	beq.n	8001812 <HAL_DMA_Abort_IT+0x8a>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_DMA_Abort_IT+0xe4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d102      	bne.n	800180c <HAL_DMA_Abort_IT+0x84>
 8001806:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800180a:	e00e      	b.n	800182a <HAL_DMA_Abort_IT+0xa2>
 800180c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001810:	e00b      	b.n	800182a <HAL_DMA_Abort_IT+0xa2>
 8001812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001816:	e008      	b.n	800182a <HAL_DMA_Abort_IT+0xa2>
 8001818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181c:	e005      	b.n	800182a <HAL_DMA_Abort_IT+0xa2>
 800181e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001822:	e002      	b.n	800182a <HAL_DMA_Abort_IT+0xa2>
 8001824:	2310      	movs	r3, #16
 8001826:	e000      	b.n	800182a <HAL_DMA_Abort_IT+0xa2>
 8001828:	2301      	movs	r3, #1
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <HAL_DMA_Abort_IT+0xe8>)
 800182c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
    } 
  }
  return status;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020008 	.word	0x40020008
 800185c:	4002001c 	.word	0x4002001c
 8001860:	40020030 	.word	0x40020030
 8001864:	40020044 	.word	0x40020044
 8001868:	40020058 	.word	0x40020058
 800186c:	4002006c 	.word	0x4002006c
 8001870:	40020000 	.word	0x40020000

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b08b      	sub	sp, #44	; 0x2c
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	e161      	b.n	8001b4c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001888:	2201      	movs	r2, #1
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8150 	bne.w	8001b46 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4a97      	ldr	r2, [pc, #604]	; (8001b08 <HAL_GPIO_Init+0x294>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d05e      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018b0:	4a95      	ldr	r2, [pc, #596]	; (8001b08 <HAL_GPIO_Init+0x294>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d875      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018b6:	4a95      	ldr	r2, [pc, #596]	; (8001b0c <HAL_GPIO_Init+0x298>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d058      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018bc:	4a93      	ldr	r2, [pc, #588]	; (8001b0c <HAL_GPIO_Init+0x298>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d86f      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018c2:	4a93      	ldr	r2, [pc, #588]	; (8001b10 <HAL_GPIO_Init+0x29c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d052      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018c8:	4a91      	ldr	r2, [pc, #580]	; (8001b10 <HAL_GPIO_Init+0x29c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d869      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018ce:	4a91      	ldr	r2, [pc, #580]	; (8001b14 <HAL_GPIO_Init+0x2a0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d04c      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018d4:	4a8f      	ldr	r2, [pc, #572]	; (8001b14 <HAL_GPIO_Init+0x2a0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d863      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018da:	4a8f      	ldr	r2, [pc, #572]	; (8001b18 <HAL_GPIO_Init+0x2a4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d046      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018e0:	4a8d      	ldr	r2, [pc, #564]	; (8001b18 <HAL_GPIO_Init+0x2a4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d85d      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d82a      	bhi.n	8001940 <HAL_GPIO_Init+0xcc>
 80018ea:	2b12      	cmp	r3, #18
 80018ec:	d859      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <HAL_GPIO_Init+0x80>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	0800196f 	.word	0x0800196f
 80018f8:	08001949 	.word	0x08001949
 80018fc:	0800195b 	.word	0x0800195b
 8001900:	0800199d 	.word	0x0800199d
 8001904:	080019a3 	.word	0x080019a3
 8001908:	080019a3 	.word	0x080019a3
 800190c:	080019a3 	.word	0x080019a3
 8001910:	080019a3 	.word	0x080019a3
 8001914:	080019a3 	.word	0x080019a3
 8001918:	080019a3 	.word	0x080019a3
 800191c:	080019a3 	.word	0x080019a3
 8001920:	080019a3 	.word	0x080019a3
 8001924:	080019a3 	.word	0x080019a3
 8001928:	080019a3 	.word	0x080019a3
 800192c:	080019a3 	.word	0x080019a3
 8001930:	080019a3 	.word	0x080019a3
 8001934:	080019a3 	.word	0x080019a3
 8001938:	08001951 	.word	0x08001951
 800193c:	08001965 	.word	0x08001965
 8001940:	4a76      	ldr	r2, [pc, #472]	; (8001b1c <HAL_GPIO_Init+0x2a8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001946:	e02c      	b.n	80019a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e029      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	3304      	adds	r3, #4
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e024      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	3308      	adds	r3, #8
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e01f      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	330c      	adds	r3, #12
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e01a      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001976:	2304      	movs	r3, #4
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e013      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2308      	movs	r3, #8
 8001986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	611a      	str	r2, [r3, #16]
          break;
 800198e:	e009      	b.n	80019a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	615a      	str	r2, [r3, #20]
          break;
 800199a:	e003      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          break;
 80019a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2bff      	cmp	r3, #255	; 0xff
 80019a8:	d801      	bhi.n	80019ae <HAL_GPIO_Init+0x13a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	e001      	b.n	80019b2 <HAL_GPIO_Init+0x13e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3304      	adds	r3, #4
 80019b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2bff      	cmp	r3, #255	; 0xff
 80019b8:	d802      	bhi.n	80019c0 <HAL_GPIO_Init+0x14c>
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x152>
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	3b08      	subs	r3, #8
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	210f      	movs	r1, #15
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	401a      	ands	r2, r3
 80019d8:	6a39      	ldr	r1, [r7, #32]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80a9 	beq.w	8001b46 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a0c:	4a45      	ldr	r2, [pc, #276]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a3d      	ldr	r2, [pc, #244]	; (8001b28 <HAL_GPIO_Init+0x2b4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00d      	beq.n	8001a54 <HAL_GPIO_Init+0x1e0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	; (8001b2c <HAL_GPIO_Init+0x2b8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d007      	beq.n	8001a50 <HAL_GPIO_Init+0x1dc>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3b      	ldr	r2, [pc, #236]	; (8001b30 <HAL_GPIO_Init+0x2bc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_GPIO_Init+0x1d8>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e004      	b.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e002      	b.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a54:	2300      	movs	r3, #0
 8001a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a58:	f002 0203 	and.w	r2, r2, #3
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	4093      	lsls	r3, r2
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a66:	492f      	ldr	r1, [pc, #188]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	492b      	ldr	r1, [pc, #172]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a8e:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4927      	ldr	r1, [pc, #156]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4921      	ldr	r1, [pc, #132]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	491d      	ldr	r1, [pc, #116]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	4917      	ldr	r1, [pc, #92]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4913      	ldr	r1, [pc, #76]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01f      	beq.n	8001b38 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	490d      	ldr	r1, [pc, #52]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60cb      	str	r3, [r1, #12]
 8001b04:	e01f      	b.n	8001b46 <HAL_GPIO_Init+0x2d2>
 8001b06:	bf00      	nop
 8001b08:	10320000 	.word	0x10320000
 8001b0c:	10310000 	.word	0x10310000
 8001b10:	10220000 	.word	0x10220000
 8001b14:	10210000 	.word	0x10210000
 8001b18:	10120000 	.word	0x10120000
 8001b1c:	10110000 	.word	0x10110000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	40011000 	.word	0x40011000
 8001b34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_GPIO_Init+0x2f4>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4909      	ldr	r1, [pc, #36]	; (8001b68 <HAL_GPIO_Init+0x2f4>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	3301      	adds	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f47f ae96 	bne.w	8001888 <HAL_GPIO_Init+0x14>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	372c      	adds	r7, #44	; 0x2c
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e001      	b.n	8001b8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001baa:	787b      	ldrb	r3, [r7, #1]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb0:	887a      	ldrh	r2, [r7, #2]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bb6:	e003      	b.n	8001bc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	041a      	lsls	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	611a      	str	r2, [r3, #16]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e272      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8087 	beq.w	8001cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4b92      	ldr	r3, [pc, #584]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d00c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf8:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d112      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
 8001c04:	4b8c      	ldr	r3, [pc, #560]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c10:	d10b      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d06c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d168      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e24c      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x76>
 8001c34:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a7f      	ldr	r2, [pc, #508]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e02e      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x98>
 8001c4a:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7a      	ldr	r2, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b78      	ldr	r3, [pc, #480]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a77      	ldr	r2, [pc, #476]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0xbc>
 8001c6e:	4b72      	ldr	r3, [pc, #456]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c88:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6a      	ldr	r2, [pc, #424]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc1c 	bl	80014e4 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fc18 	bl	80014e4 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e200      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe4>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fc08 	bl	80014e4 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fc04 	bl	80014e4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1ec      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x10c>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d06:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d12:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
 8001d1e:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1c0      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4939      	ldr	r1, [pc, #228]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	e03a      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fbbd 	bl	80014e4 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fbb9 	bl	80014e4 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1a1      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4927      	ldr	r1, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fb9c 	bl	80014e4 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff fb98 	bl	80014e4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e180      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03a      	beq.n	8001e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d019      	beq.n	8001e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fb7c 	bl	80014e4 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fb78 	bl	80014e4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e160      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f000 fad8 	bl	80023c4 <RCC_Delay>
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fb62 	bl	80014e4 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e22:	e00f      	b.n	8001e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fb5e 	bl	80014e4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d908      	bls.n	8001e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e146      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	42420000 	.word	0x42420000
 8001e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b92      	ldr	r3, [pc, #584]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e9      	bne.n	8001e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a6 	beq.w	8001faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b88      	ldr	r3, [pc, #544]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a87      	ldr	r2, [pc, #540]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	61d3      	str	r3, [r2, #28]
 8001e7a:	4b85      	ldr	r3, [pc, #532]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b7f      	ldr	r3, [pc, #508]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7e      	ldr	r2, [pc, #504]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb1f 	bl	80014e4 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff fb1b 	bl	80014e4 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e103      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b75      	ldr	r3, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x312>
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a6e      	ldr	r2, [pc, #440]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	e02d      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x334>
 8001ee6:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a69      	ldr	r2, [pc, #420]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a66      	ldr	r2, [pc, #408]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	e01c      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x356>
 8001f08:	4b61      	ldr	r3, [pc, #388]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a60      	ldr	r2, [pc, #384]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	4b5e      	ldr	r3, [pc, #376]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a5d      	ldr	r2, [pc, #372]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e00b      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a5a      	ldr	r2, [pc, #360]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b58      	ldr	r3, [pc, #352]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d015      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7ff facf 	bl	80014e4 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff facb 	bl	80014e4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0b1      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ee      	beq.n	8001f4a <HAL_RCC_OscConfig+0x37e>
 8001f6c:	e014      	b.n	8001f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fab9 	bl	80014e4 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff fab5 	bl	80014e4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e09b      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ee      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d061      	beq.n	8002084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d146      	bne.n	8002056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	4b33      	ldr	r3, [pc, #204]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7ff fa89 	bl	80014e4 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff fa85 	bl	80014e4 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e06d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d108      	bne.n	8002010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4921      	ldr	r1, [pc, #132]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a19      	ldr	r1, [r3, #32]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	430b      	orrs	r3, r1
 8002022:	491b      	ldr	r1, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff fa59 	bl	80014e4 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7ff fa55 	bl	80014e4 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e03d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x46a>
 8002054:	e035      	b.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fa42 	bl	80014e4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff fa3e 	bl	80014e4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e026      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x498>
 8002082:	e01e      	b.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e019      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_OscConfig+0x500>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000

080020d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0d0      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d910      	bls.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4965      	ldr	r1, [pc, #404]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0b8      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800212c:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002144:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800214e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	494d      	ldr	r1, [pc, #308]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d040      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e07f      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e073      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06b      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4936      	ldr	r1, [pc, #216]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c0:	f7ff f990 	bl	80014e4 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7ff f98c 	bl	80014e4 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e053      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d210      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	4922      	ldr	r1, [pc, #136]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e032      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4916      	ldr	r1, [pc, #88]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	490e      	ldr	r1, [pc, #56]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800225e:	f000 f821 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8002262:	4602      	mov	r2, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	490a      	ldr	r1, [pc, #40]	; (8002298 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	5ccb      	ldrb	r3, [r1, r3]
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1cc>)
 8002278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_ClockConfig+0x1d0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f8ee 	bl	8001460 <HAL_InitTick>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40022000 	.word	0x40022000
 8002294:	40021000 	.word	0x40021000
 8002298:	0800444c 	.word	0x0800444c
 800229c:	20000020 	.word	0x20000020
 80022a0:	20000024 	.word	0x20000024

080022a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b490      	push	{r4, r7}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022aa:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_RCC_GetSysClockFreq+0xac>)
 80022ac:	1d3c      	adds	r4, r7, #4
 80022ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022b4:	f240 2301 	movw	r3, #513	; 0x201
 80022b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ce:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x40>
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x46>
 80022e2:	e02b      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022e6:	623b      	str	r3, [r7, #32]
      break;
 80022e8:	e02b      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	0c9b      	lsrs	r3, r3, #18
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3328      	adds	r3, #40	; 0x28
 80022f4:	443b      	add	r3, r7
 80022f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d012      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0c5b      	lsrs	r3, r3, #17
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	3328      	adds	r3, #40	; 0x28
 8002312:	443b      	add	r3, r7
 8002314:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002318:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb4>)
 800231e:	fb03 f202 	mul.w	r2, r3, r2
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	e004      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4a0b      	ldr	r2, [pc, #44]	; (800235c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	623b      	str	r3, [r7, #32]
      break;
 800233a:	e002      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb4>)
 800233e:	623b      	str	r3, [r7, #32]
      break;
 8002340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002342:	6a3b      	ldr	r3, [r7, #32]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bc90      	pop	{r4, r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	0800443c 	.word	0x0800443c
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	003d0900 	.word	0x003d0900

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <HAL_RCC_GetHCLKFreq+0x10>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000020 	.word	0x20000020

08002374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002378:	f7ff fff2 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4903      	ldr	r1, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	0800445c 	.word	0x0800445c

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a0:	f7ff ffde 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0adb      	lsrs	r3, r3, #11
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	0800445c 	.word	0x0800445c

080023c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <RCC_Delay+0x34>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <RCC_Delay+0x38>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0a5b      	lsrs	r3, r3, #9
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023e0:	bf00      	nop
  }
  while (Delay --);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	60fa      	str	r2, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f9      	bne.n	80023e0 <RCC_Delay+0x1c>
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	20000020 	.word	0x20000020
 80023fc:	10624dd3 	.word	0x10624dd3

08002400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e041      	b.n	8002496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe fe98 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f000 fb80 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d001      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e035      	b.n	8002524 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a16      	ldr	r2, [pc, #88]	; (8002530 <HAL_TIM_Base_Start_IT+0x90>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_TIM_Base_Start_IT+0x4e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e2:	d004      	beq.n	80024ee <HAL_TIM_Base_Start_IT+0x4e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a12      	ldr	r2, [pc, #72]	; (8002534 <HAL_TIM_Base_Start_IT+0x94>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d111      	bne.n	8002512 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b06      	cmp	r3, #6
 80024fe:	d010      	beq.n	8002522 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002510:	e007      	b.n	8002522 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40000400 	.word	0x40000400

08002538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e041      	b.n	80025ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f839 	bl	80025d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 fae4 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d122      	bne.n	8002644 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b02      	cmp	r3, #2
 800260a:	d11b      	bne.n	8002644 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0202 	mvn.w	r2, #2
 8002614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fa6f 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002630:	e005      	b.n	800263e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa62 	bl	8002afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fa71 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d122      	bne.n	8002698 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b04      	cmp	r3, #4
 800265e:	d11b      	bne.n	8002698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0204 	mvn.w	r2, #4
 8002668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fa45 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002684:	e005      	b.n	8002692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa38 	bl	8002afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fa47 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d122      	bne.n	80026ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d11b      	bne.n	80026ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0208 	mvn.w	r2, #8
 80026bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2204      	movs	r2, #4
 80026c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa1b 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 80026d8:	e005      	b.n	80026e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa0e 	bl	8002afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fa1d 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d122      	bne.n	8002740 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b10      	cmp	r3, #16
 8002706:	d11b      	bne.n	8002740 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0210 	mvn.w	r2, #16
 8002710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2208      	movs	r2, #8
 8002716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f9f1 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f9e4 	bl	8002afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f9f3 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0201 	mvn.w	r2, #1
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fcb6 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b80      	cmp	r3, #128	; 0x80
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d107      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fcad 	bl	80030f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f9b7 	bl	8002b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0220 	mvn.w	r2, #32
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fc78 	bl	80030e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800280e:	2302      	movs	r3, #2
 8002810:	e0ac      	b.n	800296c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0c      	cmp	r3, #12
 800281e:	f200 809f 	bhi.w	8002960 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002822:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	0800285d 	.word	0x0800285d
 800282c:	08002961 	.word	0x08002961
 8002830:	08002961 	.word	0x08002961
 8002834:	08002961 	.word	0x08002961
 8002838:	0800289d 	.word	0x0800289d
 800283c:	08002961 	.word	0x08002961
 8002840:	08002961 	.word	0x08002961
 8002844:	08002961 	.word	0x08002961
 8002848:	080028df 	.word	0x080028df
 800284c:	08002961 	.word	0x08002961
 8002850:	08002961 	.word	0x08002961
 8002854:	08002961 	.word	0x08002961
 8002858:	0800291f 	.word	0x0800291f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f9c6 	bl	8002bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0208 	orr.w	r2, r2, #8
 8002876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0204 	bic.w	r2, r2, #4
 8002886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6999      	ldr	r1, [r3, #24]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	619a      	str	r2, [r3, #24]
      break;
 800289a:	e062      	b.n	8002962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fa0c 	bl	8002cc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6999      	ldr	r1, [r3, #24]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	021a      	lsls	r2, r3, #8
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	619a      	str	r2, [r3, #24]
      break;
 80028dc:	e041      	b.n	8002962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fa55 	bl	8002d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0208 	orr.w	r2, r2, #8
 80028f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0204 	bic.w	r2, r2, #4
 8002908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69d9      	ldr	r1, [r3, #28]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	61da      	str	r2, [r3, #28]
      break;
 800291c:	e021      	b.n	8002962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fa9f 	bl	8002e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69d9      	ldr	r1, [r3, #28]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	021a      	lsls	r2, r3, #8
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	61da      	str	r2, [r3, #28]
      break;
 800295e:	e000      	b.n	8002962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002960:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_TIM_ConfigClockSource+0x18>
 8002988:	2302      	movs	r3, #2
 800298a:	e0b3      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x180>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c4:	d03e      	beq.n	8002a44 <HAL_TIM_ConfigClockSource+0xd0>
 80029c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ca:	f200 8087 	bhi.w	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	f000 8085 	beq.w	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029da:	d87f      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029dc:	2b70      	cmp	r3, #112	; 0x70
 80029de:	d01a      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0xa2>
 80029e0:	2b70      	cmp	r3, #112	; 0x70
 80029e2:	d87b      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029e4:	2b60      	cmp	r3, #96	; 0x60
 80029e6:	d050      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x116>
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d877      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029ec:	2b50      	cmp	r3, #80	; 0x50
 80029ee:	d03c      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0xf6>
 80029f0:	2b50      	cmp	r3, #80	; 0x50
 80029f2:	d873      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d058      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x136>
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d86f      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029fc:	2b30      	cmp	r3, #48	; 0x30
 80029fe:	d064      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x156>
 8002a00:	2b30      	cmp	r3, #48	; 0x30
 8002a02:	d86b      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d060      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x156>
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d867      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d05c      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x156>
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d05a      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a14:	e062      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f000 fae4 	bl	8002ff2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	609a      	str	r2, [r3, #8]
      break;
 8002a42:	e04e      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f000 facd 	bl	8002ff2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a66:	609a      	str	r2, [r3, #8]
      break;
 8002a68:	e03b      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f000 fa44 	bl	8002f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2150      	movs	r1, #80	; 0x50
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fa9b 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002a88:	e02b      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f000 fa62 	bl	8002f60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2160      	movs	r1, #96	; 0x60
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fa8b 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002aa8:	e01b      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f000 fa24 	bl	8002f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2140      	movs	r1, #64	; 0x40
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fa7b 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002ac8:	e00b      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f000 fa72 	bl	8002fbe <TIM_ITRx_SetConfig>
        break;
 8002ada:	e002      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002adc:	bf00      	nop
 8002ade:	e000      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ae0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a25      	ldr	r2, [pc, #148]	; (8002bec <TIM_Base_SetConfig+0xa8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <TIM_Base_SetConfig+0x28>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d003      	beq.n	8002b6c <TIM_Base_SetConfig+0x28>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a22      	ldr	r2, [pc, #136]	; (8002bf0 <TIM_Base_SetConfig+0xac>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d108      	bne.n	8002b7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <TIM_Base_SetConfig+0xa8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <TIM_Base_SetConfig+0x52>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d003      	beq.n	8002b96 <TIM_Base_SetConfig+0x52>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <TIM_Base_SetConfig+0xac>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a07      	ldr	r2, [pc, #28]	; (8002bec <TIM_Base_SetConfig+0xa8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d103      	bne.n	8002bdc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	615a      	str	r2, [r3, #20]
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400

08002bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f023 0201 	bic.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f023 0302 	bic.w	r3, r3, #2
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <TIM_OC1_SetConfig+0xc8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10c      	bne.n	8002c6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f023 0308 	bic.w	r3, r3, #8
 8002c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <TIM_OC1_SetConfig+0xc8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d111      	bne.n	8002c96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	621a      	str	r2, [r3, #32]
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40012c00 	.word	0x40012c00

08002cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f023 0210 	bic.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 0320 	bic.w	r3, r3, #32
 8002d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <TIM_OC2_SetConfig+0xd0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10d      	bne.n	8002d3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <TIM_OC2_SetConfig+0xd0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d113      	bne.n	8002d6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	40012c00 	.word	0x40012c00

08002d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <TIM_OC3_SetConfig+0xd0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10d      	bne.n	8002e0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <TIM_OC3_SetConfig+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d113      	bne.n	8002e3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	621a      	str	r2, [r3, #32]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40012c00 	.word	0x40012c00

08002e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	031b      	lsls	r3, r3, #12
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0f      	ldr	r2, [pc, #60]	; (8002f00 <TIM_OC4_SetConfig+0x98>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d109      	bne.n	8002edc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	40012c00 	.word	0x40012c00

08002f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f023 0201 	bic.w	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f023 030a 	bic.w	r3, r3, #10
 8002f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f023 0210 	bic.w	r2, r3, #16
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	031b      	lsls	r3, r3, #12
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	621a      	str	r2, [r3, #32]
}
 8002fb4:	bf00      	nop
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f043 0307 	orr.w	r3, r3, #7
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b087      	sub	sp, #28
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800300c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	021a      	lsls	r2, r3, #8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	431a      	orrs	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4313      	orrs	r3, r2
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	609a      	str	r2, [r3, #8]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003044:	2302      	movs	r3, #2
 8003046:	e041      	b.n	80030cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a14      	ldr	r2, [pc, #80]	; (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d009      	beq.n	80030a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003094:	d004      	beq.n	80030a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a10      	ldr	r2, [pc, #64]	; (80030dc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d10c      	bne.n	80030ba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40000400 	.word	0x40000400

080030e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e03f      	b.n	8003196 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe f888 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	; 0x24
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fc25 	bl	8003998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800315c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800316c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b08a      	sub	sp, #40	; 0x28
 80031a2:	af02      	add	r7, sp, #8
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d17c      	bne.n	80032b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_UART_Transmit+0x2c>
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e075      	b.n	80032ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_UART_Transmit+0x3e>
 80031d8:	2302      	movs	r3, #2
 80031da:	e06e      	b.n	80032ba <HAL_UART_Transmit+0x11c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2221      	movs	r2, #33	; 0x21
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031f2:	f7fe f977 	bl	80014e4 <HAL_GetTick>
 80031f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320c:	d108      	bne.n	8003220 <HAL_UART_Transmit+0x82>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	e003      	b.n	8003228 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003230:	e02a      	b.n	8003288 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2200      	movs	r2, #0
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fa11 	bl	8003664 <UART_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e036      	b.n	80032ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	3302      	adds	r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e007      	b.n	800327a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	3301      	adds	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1cf      	bne.n	8003232 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2200      	movs	r2, #0
 800329a:	2140      	movs	r1, #64	; 0x40
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f9e1 	bl	8003664 <UART_WaitOnFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e006      	b.n	80032ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_UART_IRQHandler+0x52>
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fa99 	bl	8003846 <UART_Receive_IT>
      return;
 8003314:	e17b      	b.n	800360e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80b1 	beq.w	8003480 <HAL_UART_IRQHandler+0x1bc>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <HAL_UART_IRQHandler+0x70>
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80a6 	beq.w	8003480 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_UART_IRQHandler+0x90>
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f043 0201 	orr.w	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_UART_IRQHandler+0xb0>
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f043 0202 	orr.w	r2, r3, #2
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_UART_IRQHandler+0xd0>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f043 0204 	orr.w	r2, r3, #4
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00f      	beq.n	80033be <HAL_UART_IRQHandler+0xfa>
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <HAL_UART_IRQHandler+0xee>
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f043 0208 	orr.w	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 811e 	beq.w	8003604 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_UART_IRQHandler+0x11e>
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fa32 	bl	8003846 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <HAL_UART_IRQHandler+0x146>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d031      	beq.n	800346e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f974 	bl	80036f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d023      	beq.n	8003466 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800342c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	2b00      	cmp	r3, #0
 8003434:	d013      	beq.n	800345e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	4a76      	ldr	r2, [pc, #472]	; (8003614 <HAL_UART_IRQHandler+0x350>)
 800343c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe f9a0 	bl	8001788 <HAL_DMA_Abort_IT>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003458:	4610      	mov	r0, r2
 800345a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345c:	e00e      	b.n	800347c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8ec 	bl	800363c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	e00a      	b.n	800347c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8e8 	bl	800363c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346c:	e006      	b.n	800347c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8e4 	bl	800363c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800347a:	e0c3      	b.n	8003604 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	bf00      	nop
    return;
 800347e:	e0c1      	b.n	8003604 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 80a1 	bne.w	80035cc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 809b 	beq.w	80035cc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8095 	beq.w	80035cc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d04e      	beq.n	8003564 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80034d0:	8a3b      	ldrh	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8098 	beq.w	8003608 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034dc:	8a3a      	ldrh	r2, [r7, #16]
 80034de:	429a      	cmp	r2, r3
 80034e0:	f080 8092 	bcs.w	8003608 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8a3a      	ldrh	r2, [r7, #16]
 80034e8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d02b      	beq.n	800354c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003502:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003522:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0210 	bic.w	r2, r2, #16
 8003540:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe f8e3 	bl	8001712 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003554:	b29b      	uxth	r3, r3
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	b29b      	uxth	r3, r3
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f876 	bl	800364e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003562:	e051      	b.n	8003608 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800356c:	b29b      	uxth	r3, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d047      	beq.n	800360c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800357c:	8a7b      	ldrh	r3, [r7, #18]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d044      	beq.n	800360c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003590:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0210 	bic.w	r2, r2, #16
 80035be:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035c0:	8a7b      	ldrh	r3, [r7, #18]
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f842 	bl	800364e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80035ca:	e01f      	b.n	800360c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_UART_IRQHandler+0x324>
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8c9 	bl	8003778 <UART_Transmit_IT>
    return;
 80035e6:	e012      	b.n	800360e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <HAL_UART_IRQHandler+0x34a>
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f90a 	bl	8003816 <UART_EndTransmit_IT>
    return;
 8003602:	e004      	b.n	800360e <HAL_UART_IRQHandler+0x34a>
    return;
 8003604:	bf00      	nop
 8003606:	e002      	b.n	800360e <HAL_UART_IRQHandler+0x34a>
      return;
 8003608:	bf00      	nop
 800360a:	e000      	b.n	800360e <HAL_UART_IRQHandler+0x34a>
      return;
 800360c:	bf00      	nop
  }
}
 800360e:	3728      	adds	r7, #40	; 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	08003751 	.word	0x08003751

08003618 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003674:	e02c      	b.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d028      	beq.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <UART_WaitOnFlagUntilTimeout+0x30>
 8003684:	f7fd ff2e 	bl	80014e4 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	429a      	cmp	r2, r3
 8003692:	d21d      	bcs.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e00f      	b.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4013      	ands	r3, r2
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	429a      	cmp	r2, r3
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d0c3      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800370e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0210 	bic.w	r2, r2, #16
 8003736:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff ff66 	bl	800363c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b21      	cmp	r3, #33	; 0x21
 800378a:	d13e      	bne.n	800380a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003794:	d114      	bne.n	80037c0 <UART_Transmit_IT+0x48>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d110      	bne.n	80037c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]
 80037be:	e008      	b.n	80037d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	1c59      	adds	r1, r3, #1
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6211      	str	r1, [r2, #32]
 80037ca:	781a      	ldrb	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29b      	uxth	r3, r3
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4619      	mov	r1, r3
 80037e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003804:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff feee 	bl	8003618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b22      	cmp	r3, #34	; 0x22
 8003858:	f040 8099 	bne.w	800398e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003864:	d117      	bne.n	8003896 <UART_Receive_IT+0x50>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d113      	bne.n	8003896 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b29b      	uxth	r3, r3
 8003880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003884:	b29a      	uxth	r2, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	1c9a      	adds	r2, r3, #2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
 8003894:	e026      	b.n	80038e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d007      	beq.n	80038ba <UART_Receive_IT+0x74>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <UART_Receive_IT+0x82>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e008      	b.n	80038da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4619      	mov	r1, r3
 80038f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d148      	bne.n	800398a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0220 	bic.w	r2, r2, #32
 8003906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003916:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	2b01      	cmp	r3, #1
 8003936:	d123      	bne.n	8003980 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0210 	bic.w	r2, r2, #16
 800394c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b10      	cmp	r3, #16
 800395a:	d10a      	bne.n	8003972 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff fe68 	bl	800364e <HAL_UARTEx_RxEventCallback>
 800397e:	e002      	b.n	8003986 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff fe52 	bl	800362a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e002      	b.n	8003990 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039d2:	f023 030c 	bic.w	r3, r3, #12
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	430b      	orrs	r3, r1
 80039de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2c      	ldr	r2, [pc, #176]	; (8003aac <UART_SetConfig+0x114>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d103      	bne.n	8003a08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7fe fccc 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	e002      	b.n	8003a0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a08:	f7fe fcb4 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	009a      	lsls	r2, r3, #2
 8003a18:	441a      	add	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <UART_SetConfig+0x118>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	0119      	lsls	r1, r3, #4
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009a      	lsls	r2, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <UART_SetConfig+0x118>)
 8003a46:	fba3 0302 	umull	r0, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2064      	movs	r0, #100	; 0x64
 8003a4e:	fb00 f303 	mul.w	r3, r0, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	3332      	adds	r3, #50	; 0x32
 8003a58:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <UART_SetConfig+0x118>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a64:	4419      	add	r1, r3
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009a      	lsls	r2, r3, #2
 8003a70:	441a      	add	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <UART_SetConfig+0x118>)
 8003a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2064      	movs	r0, #100	; 0x64
 8003a86:	fb00 f303 	mul.w	r3, r0, r3
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	3332      	adds	r3, #50	; 0x32
 8003a90:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <UART_SetConfig+0x118>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	f003 020f 	and.w	r2, r3, #15
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40013800 	.word	0x40013800
 8003ab0:	51eb851f 	.word	0x51eb851f

08003ab4 <__errno>:
 8003ab4:	4b01      	ldr	r3, [pc, #4]	; (8003abc <__errno+0x8>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	2000002c 	.word	0x2000002c

08003ac0 <__libc_init_array>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	4d0c      	ldr	r5, [pc, #48]	; (8003af8 <__libc_init_array+0x38>)
 8003ac6:	4c0d      	ldr	r4, [pc, #52]	; (8003afc <__libc_init_array+0x3c>)
 8003ac8:	1b64      	subs	r4, r4, r5
 8003aca:	10a4      	asrs	r4, r4, #2
 8003acc:	42a6      	cmp	r6, r4
 8003ace:	d109      	bne.n	8003ae4 <__libc_init_array+0x24>
 8003ad0:	f000 fc9c 	bl	800440c <_init>
 8003ad4:	2600      	movs	r6, #0
 8003ad6:	4d0a      	ldr	r5, [pc, #40]	; (8003b00 <__libc_init_array+0x40>)
 8003ad8:	4c0a      	ldr	r4, [pc, #40]	; (8003b04 <__libc_init_array+0x44>)
 8003ada:	1b64      	subs	r4, r4, r5
 8003adc:	10a4      	asrs	r4, r4, #2
 8003ade:	42a6      	cmp	r6, r4
 8003ae0:	d105      	bne.n	8003aee <__libc_init_array+0x2e>
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae8:	4798      	blx	r3
 8003aea:	3601      	adds	r6, #1
 8003aec:	e7ee      	b.n	8003acc <__libc_init_array+0xc>
 8003aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af2:	4798      	blx	r3
 8003af4:	3601      	adds	r6, #1
 8003af6:	e7f2      	b.n	8003ade <__libc_init_array+0x1e>
 8003af8:	08004498 	.word	0x08004498
 8003afc:	08004498 	.word	0x08004498
 8003b00:	08004498 	.word	0x08004498
 8003b04:	0800449c 	.word	0x0800449c

08003b08 <memset>:
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4402      	add	r2, r0
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d100      	bne.n	8003b12 <memset+0xa>
 8003b10:	4770      	bx	lr
 8003b12:	f803 1b01 	strb.w	r1, [r3], #1
 8003b16:	e7f9      	b.n	8003b0c <memset+0x4>

08003b18 <siprintf>:
 8003b18:	b40e      	push	{r1, r2, r3}
 8003b1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b1e:	b500      	push	{lr}
 8003b20:	b09c      	sub	sp, #112	; 0x70
 8003b22:	ab1d      	add	r3, sp, #116	; 0x74
 8003b24:	9002      	str	r0, [sp, #8]
 8003b26:	9006      	str	r0, [sp, #24]
 8003b28:	9107      	str	r1, [sp, #28]
 8003b2a:	9104      	str	r1, [sp, #16]
 8003b2c:	4808      	ldr	r0, [pc, #32]	; (8003b50 <siprintf+0x38>)
 8003b2e:	4909      	ldr	r1, [pc, #36]	; (8003b54 <siprintf+0x3c>)
 8003b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b34:	9105      	str	r1, [sp, #20]
 8003b36:	6800      	ldr	r0, [r0, #0]
 8003b38:	a902      	add	r1, sp, #8
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	f000 f868 	bl	8003c10 <_svfiprintf_r>
 8003b40:	2200      	movs	r2, #0
 8003b42:	9b02      	ldr	r3, [sp, #8]
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	b01c      	add	sp, #112	; 0x70
 8003b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b4c:	b003      	add	sp, #12
 8003b4e:	4770      	bx	lr
 8003b50:	2000002c 	.word	0x2000002c
 8003b54:	ffff0208 	.word	0xffff0208

08003b58 <__ssputs_r>:
 8003b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	688e      	ldr	r6, [r1, #8]
 8003b5e:	4682      	mov	sl, r0
 8003b60:	429e      	cmp	r6, r3
 8003b62:	460c      	mov	r4, r1
 8003b64:	4690      	mov	r8, r2
 8003b66:	461f      	mov	r7, r3
 8003b68:	d838      	bhi.n	8003bdc <__ssputs_r+0x84>
 8003b6a:	898a      	ldrh	r2, [r1, #12]
 8003b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b70:	d032      	beq.n	8003bd8 <__ssputs_r+0x80>
 8003b72:	6825      	ldr	r5, [r4, #0]
 8003b74:	6909      	ldr	r1, [r1, #16]
 8003b76:	3301      	adds	r3, #1
 8003b78:	eba5 0901 	sub.w	r9, r5, r1
 8003b7c:	6965      	ldr	r5, [r4, #20]
 8003b7e:	444b      	add	r3, r9
 8003b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b88:	106d      	asrs	r5, r5, #1
 8003b8a:	429d      	cmp	r5, r3
 8003b8c:	bf38      	it	cc
 8003b8e:	461d      	movcc	r5, r3
 8003b90:	0553      	lsls	r3, r2, #21
 8003b92:	d531      	bpl.n	8003bf8 <__ssputs_r+0xa0>
 8003b94:	4629      	mov	r1, r5
 8003b96:	f000 fb6f 	bl	8004278 <_malloc_r>
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	b950      	cbnz	r0, 8003bb4 <__ssputs_r+0x5c>
 8003b9e:	230c      	movs	r3, #12
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	f8ca 3000 	str.w	r3, [sl]
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bae:	81a3      	strh	r3, [r4, #12]
 8003bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb4:	464a      	mov	r2, r9
 8003bb6:	6921      	ldr	r1, [r4, #16]
 8003bb8:	f000 face 	bl	8004158 <memcpy>
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc6:	81a3      	strh	r3, [r4, #12]
 8003bc8:	6126      	str	r6, [r4, #16]
 8003bca:	444e      	add	r6, r9
 8003bcc:	6026      	str	r6, [r4, #0]
 8003bce:	463e      	mov	r6, r7
 8003bd0:	6165      	str	r5, [r4, #20]
 8003bd2:	eba5 0509 	sub.w	r5, r5, r9
 8003bd6:	60a5      	str	r5, [r4, #8]
 8003bd8:	42be      	cmp	r6, r7
 8003bda:	d900      	bls.n	8003bde <__ssputs_r+0x86>
 8003bdc:	463e      	mov	r6, r7
 8003bde:	4632      	mov	r2, r6
 8003be0:	4641      	mov	r1, r8
 8003be2:	6820      	ldr	r0, [r4, #0]
 8003be4:	f000 fac6 	bl	8004174 <memmove>
 8003be8:	68a3      	ldr	r3, [r4, #8]
 8003bea:	2000      	movs	r0, #0
 8003bec:	1b9b      	subs	r3, r3, r6
 8003bee:	60a3      	str	r3, [r4, #8]
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	4433      	add	r3, r6
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	e7db      	b.n	8003bb0 <__ssputs_r+0x58>
 8003bf8:	462a      	mov	r2, r5
 8003bfa:	f000 fbb1 	bl	8004360 <_realloc_r>
 8003bfe:	4606      	mov	r6, r0
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d1e1      	bne.n	8003bc8 <__ssputs_r+0x70>
 8003c04:	4650      	mov	r0, sl
 8003c06:	6921      	ldr	r1, [r4, #16]
 8003c08:	f000 face 	bl	80041a8 <_free_r>
 8003c0c:	e7c7      	b.n	8003b9e <__ssputs_r+0x46>
	...

08003c10 <_svfiprintf_r>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	4698      	mov	r8, r3
 8003c16:	898b      	ldrh	r3, [r1, #12]
 8003c18:	4607      	mov	r7, r0
 8003c1a:	061b      	lsls	r3, r3, #24
 8003c1c:	460d      	mov	r5, r1
 8003c1e:	4614      	mov	r4, r2
 8003c20:	b09d      	sub	sp, #116	; 0x74
 8003c22:	d50e      	bpl.n	8003c42 <_svfiprintf_r+0x32>
 8003c24:	690b      	ldr	r3, [r1, #16]
 8003c26:	b963      	cbnz	r3, 8003c42 <_svfiprintf_r+0x32>
 8003c28:	2140      	movs	r1, #64	; 0x40
 8003c2a:	f000 fb25 	bl	8004278 <_malloc_r>
 8003c2e:	6028      	str	r0, [r5, #0]
 8003c30:	6128      	str	r0, [r5, #16]
 8003c32:	b920      	cbnz	r0, 8003c3e <_svfiprintf_r+0x2e>
 8003c34:	230c      	movs	r3, #12
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	e0d1      	b.n	8003de2 <_svfiprintf_r+0x1d2>
 8003c3e:	2340      	movs	r3, #64	; 0x40
 8003c40:	616b      	str	r3, [r5, #20]
 8003c42:	2300      	movs	r3, #0
 8003c44:	9309      	str	r3, [sp, #36]	; 0x24
 8003c46:	2320      	movs	r3, #32
 8003c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c4c:	2330      	movs	r3, #48	; 0x30
 8003c4e:	f04f 0901 	mov.w	r9, #1
 8003c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003dfc <_svfiprintf_r+0x1ec>
 8003c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c5e:	4623      	mov	r3, r4
 8003c60:	469a      	mov	sl, r3
 8003c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c66:	b10a      	cbz	r2, 8003c6c <_svfiprintf_r+0x5c>
 8003c68:	2a25      	cmp	r2, #37	; 0x25
 8003c6a:	d1f9      	bne.n	8003c60 <_svfiprintf_r+0x50>
 8003c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c70:	d00b      	beq.n	8003c8a <_svfiprintf_r+0x7a>
 8003c72:	465b      	mov	r3, fp
 8003c74:	4622      	mov	r2, r4
 8003c76:	4629      	mov	r1, r5
 8003c78:	4638      	mov	r0, r7
 8003c7a:	f7ff ff6d 	bl	8003b58 <__ssputs_r>
 8003c7e:	3001      	adds	r0, #1
 8003c80:	f000 80aa 	beq.w	8003dd8 <_svfiprintf_r+0x1c8>
 8003c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c86:	445a      	add	r2, fp
 8003c88:	9209      	str	r2, [sp, #36]	; 0x24
 8003c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80a2 	beq.w	8003dd8 <_svfiprintf_r+0x1c8>
 8003c94:	2300      	movs	r3, #0
 8003c96:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c9e:	f10a 0a01 	add.w	sl, sl, #1
 8003ca2:	9304      	str	r3, [sp, #16]
 8003ca4:	9307      	str	r3, [sp, #28]
 8003ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003caa:	931a      	str	r3, [sp, #104]	; 0x68
 8003cac:	4654      	mov	r4, sl
 8003cae:	2205      	movs	r2, #5
 8003cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb4:	4851      	ldr	r0, [pc, #324]	; (8003dfc <_svfiprintf_r+0x1ec>)
 8003cb6:	f000 fa41 	bl	800413c <memchr>
 8003cba:	9a04      	ldr	r2, [sp, #16]
 8003cbc:	b9d8      	cbnz	r0, 8003cf6 <_svfiprintf_r+0xe6>
 8003cbe:	06d0      	lsls	r0, r2, #27
 8003cc0:	bf44      	itt	mi
 8003cc2:	2320      	movmi	r3, #32
 8003cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cc8:	0711      	lsls	r1, r2, #28
 8003cca:	bf44      	itt	mi
 8003ccc:	232b      	movmi	r3, #43	; 0x2b
 8003cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd8:	d015      	beq.n	8003d06 <_svfiprintf_r+0xf6>
 8003cda:	4654      	mov	r4, sl
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f04f 0c0a 	mov.w	ip, #10
 8003ce2:	9a07      	ldr	r2, [sp, #28]
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cea:	3b30      	subs	r3, #48	; 0x30
 8003cec:	2b09      	cmp	r3, #9
 8003cee:	d94e      	bls.n	8003d8e <_svfiprintf_r+0x17e>
 8003cf0:	b1b0      	cbz	r0, 8003d20 <_svfiprintf_r+0x110>
 8003cf2:	9207      	str	r2, [sp, #28]
 8003cf4:	e014      	b.n	8003d20 <_svfiprintf_r+0x110>
 8003cf6:	eba0 0308 	sub.w	r3, r0, r8
 8003cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	46a2      	mov	sl, r4
 8003d02:	9304      	str	r3, [sp, #16]
 8003d04:	e7d2      	b.n	8003cac <_svfiprintf_r+0x9c>
 8003d06:	9b03      	ldr	r3, [sp, #12]
 8003d08:	1d19      	adds	r1, r3, #4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	9103      	str	r1, [sp, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfbb      	ittet	lt
 8003d12:	425b      	neglt	r3, r3
 8003d14:	f042 0202 	orrlt.w	r2, r2, #2
 8003d18:	9307      	strge	r3, [sp, #28]
 8003d1a:	9307      	strlt	r3, [sp, #28]
 8003d1c:	bfb8      	it	lt
 8003d1e:	9204      	strlt	r2, [sp, #16]
 8003d20:	7823      	ldrb	r3, [r4, #0]
 8003d22:	2b2e      	cmp	r3, #46	; 0x2e
 8003d24:	d10c      	bne.n	8003d40 <_svfiprintf_r+0x130>
 8003d26:	7863      	ldrb	r3, [r4, #1]
 8003d28:	2b2a      	cmp	r3, #42	; 0x2a
 8003d2a:	d135      	bne.n	8003d98 <_svfiprintf_r+0x188>
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	3402      	adds	r4, #2
 8003d30:	1d1a      	adds	r2, r3, #4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	9203      	str	r2, [sp, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	bfb8      	it	lt
 8003d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d3e:	9305      	str	r3, [sp, #20]
 8003d40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003e00 <_svfiprintf_r+0x1f0>
 8003d44:	2203      	movs	r2, #3
 8003d46:	4650      	mov	r0, sl
 8003d48:	7821      	ldrb	r1, [r4, #0]
 8003d4a:	f000 f9f7 	bl	800413c <memchr>
 8003d4e:	b140      	cbz	r0, 8003d62 <_svfiprintf_r+0x152>
 8003d50:	2340      	movs	r3, #64	; 0x40
 8003d52:	eba0 000a 	sub.w	r0, r0, sl
 8003d56:	fa03 f000 	lsl.w	r0, r3, r0
 8003d5a:	9b04      	ldr	r3, [sp, #16]
 8003d5c:	3401      	adds	r4, #1
 8003d5e:	4303      	orrs	r3, r0
 8003d60:	9304      	str	r3, [sp, #16]
 8003d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d66:	2206      	movs	r2, #6
 8003d68:	4826      	ldr	r0, [pc, #152]	; (8003e04 <_svfiprintf_r+0x1f4>)
 8003d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d6e:	f000 f9e5 	bl	800413c <memchr>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d038      	beq.n	8003de8 <_svfiprintf_r+0x1d8>
 8003d76:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <_svfiprintf_r+0x1f8>)
 8003d78:	bb1b      	cbnz	r3, 8003dc2 <_svfiprintf_r+0x1b2>
 8003d7a:	9b03      	ldr	r3, [sp, #12]
 8003d7c:	3307      	adds	r3, #7
 8003d7e:	f023 0307 	bic.w	r3, r3, #7
 8003d82:	3308      	adds	r3, #8
 8003d84:	9303      	str	r3, [sp, #12]
 8003d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d88:	4433      	add	r3, r6
 8003d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d8c:	e767      	b.n	8003c5e <_svfiprintf_r+0x4e>
 8003d8e:	460c      	mov	r4, r1
 8003d90:	2001      	movs	r0, #1
 8003d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d96:	e7a5      	b.n	8003ce4 <_svfiprintf_r+0xd4>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f04f 0c0a 	mov.w	ip, #10
 8003d9e:	4619      	mov	r1, r3
 8003da0:	3401      	adds	r4, #1
 8003da2:	9305      	str	r3, [sp, #20]
 8003da4:	4620      	mov	r0, r4
 8003da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003daa:	3a30      	subs	r2, #48	; 0x30
 8003dac:	2a09      	cmp	r2, #9
 8003dae:	d903      	bls.n	8003db8 <_svfiprintf_r+0x1a8>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0c5      	beq.n	8003d40 <_svfiprintf_r+0x130>
 8003db4:	9105      	str	r1, [sp, #20]
 8003db6:	e7c3      	b.n	8003d40 <_svfiprintf_r+0x130>
 8003db8:	4604      	mov	r4, r0
 8003dba:	2301      	movs	r3, #1
 8003dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dc0:	e7f0      	b.n	8003da4 <_svfiprintf_r+0x194>
 8003dc2:	ab03      	add	r3, sp, #12
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	462a      	mov	r2, r5
 8003dc8:	4638      	mov	r0, r7
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <_svfiprintf_r+0x1fc>)
 8003dcc:	a904      	add	r1, sp, #16
 8003dce:	f3af 8000 	nop.w
 8003dd2:	1c42      	adds	r2, r0, #1
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	d1d6      	bne.n	8003d86 <_svfiprintf_r+0x176>
 8003dd8:	89ab      	ldrh	r3, [r5, #12]
 8003dda:	065b      	lsls	r3, r3, #25
 8003ddc:	f53f af2c 	bmi.w	8003c38 <_svfiprintf_r+0x28>
 8003de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003de2:	b01d      	add	sp, #116	; 0x74
 8003de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de8:	ab03      	add	r3, sp, #12
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	462a      	mov	r2, r5
 8003dee:	4638      	mov	r0, r7
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <_svfiprintf_r+0x1fc>)
 8003df2:	a904      	add	r1, sp, #16
 8003df4:	f000 f87c 	bl	8003ef0 <_printf_i>
 8003df8:	e7eb      	b.n	8003dd2 <_svfiprintf_r+0x1c2>
 8003dfa:	bf00      	nop
 8003dfc:	08004464 	.word	0x08004464
 8003e00:	0800446a 	.word	0x0800446a
 8003e04:	0800446e 	.word	0x0800446e
 8003e08:	00000000 	.word	0x00000000
 8003e0c:	08003b59 	.word	0x08003b59

08003e10 <_printf_common>:
 8003e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e14:	4616      	mov	r6, r2
 8003e16:	4699      	mov	r9, r3
 8003e18:	688a      	ldr	r2, [r1, #8]
 8003e1a:	690b      	ldr	r3, [r1, #16]
 8003e1c:	4607      	mov	r7, r0
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	bfb8      	it	lt
 8003e22:	4613      	movlt	r3, r2
 8003e24:	6033      	str	r3, [r6, #0]
 8003e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e30:	b10a      	cbz	r2, 8003e36 <_printf_common+0x26>
 8003e32:	3301      	adds	r3, #1
 8003e34:	6033      	str	r3, [r6, #0]
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	0699      	lsls	r1, r3, #26
 8003e3a:	bf42      	ittt	mi
 8003e3c:	6833      	ldrmi	r3, [r6, #0]
 8003e3e:	3302      	addmi	r3, #2
 8003e40:	6033      	strmi	r3, [r6, #0]
 8003e42:	6825      	ldr	r5, [r4, #0]
 8003e44:	f015 0506 	ands.w	r5, r5, #6
 8003e48:	d106      	bne.n	8003e58 <_printf_common+0x48>
 8003e4a:	f104 0a19 	add.w	sl, r4, #25
 8003e4e:	68e3      	ldr	r3, [r4, #12]
 8003e50:	6832      	ldr	r2, [r6, #0]
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	42ab      	cmp	r3, r5
 8003e56:	dc28      	bgt.n	8003eaa <_printf_common+0x9a>
 8003e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e5c:	1e13      	subs	r3, r2, #0
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	bf18      	it	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	0692      	lsls	r2, r2, #26
 8003e66:	d42d      	bmi.n	8003ec4 <_printf_common+0xb4>
 8003e68:	4649      	mov	r1, r9
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e70:	47c0      	blx	r8
 8003e72:	3001      	adds	r0, #1
 8003e74:	d020      	beq.n	8003eb8 <_printf_common+0xa8>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	68e5      	ldr	r5, [r4, #12]
 8003e7a:	f003 0306 	and.w	r3, r3, #6
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	bf18      	it	ne
 8003e82:	2500      	movne	r5, #0
 8003e84:	6832      	ldr	r2, [r6, #0]
 8003e86:	f04f 0600 	mov.w	r6, #0
 8003e8a:	68a3      	ldr	r3, [r4, #8]
 8003e8c:	bf08      	it	eq
 8003e8e:	1aad      	subeq	r5, r5, r2
 8003e90:	6922      	ldr	r2, [r4, #16]
 8003e92:	bf08      	it	eq
 8003e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bfc4      	itt	gt
 8003e9c:	1a9b      	subgt	r3, r3, r2
 8003e9e:	18ed      	addgt	r5, r5, r3
 8003ea0:	341a      	adds	r4, #26
 8003ea2:	42b5      	cmp	r5, r6
 8003ea4:	d11a      	bne.n	8003edc <_printf_common+0xcc>
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e008      	b.n	8003ebc <_printf_common+0xac>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4652      	mov	r2, sl
 8003eae:	4649      	mov	r1, r9
 8003eb0:	4638      	mov	r0, r7
 8003eb2:	47c0      	blx	r8
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d103      	bne.n	8003ec0 <_printf_common+0xb0>
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec0:	3501      	adds	r5, #1
 8003ec2:	e7c4      	b.n	8003e4e <_printf_common+0x3e>
 8003ec4:	2030      	movs	r0, #48	; 0x30
 8003ec6:	18e1      	adds	r1, r4, r3
 8003ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ed2:	4422      	add	r2, r4
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eda:	e7c5      	b.n	8003e68 <_printf_common+0x58>
 8003edc:	2301      	movs	r3, #1
 8003ede:	4622      	mov	r2, r4
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	47c0      	blx	r8
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	d0e6      	beq.n	8003eb8 <_printf_common+0xa8>
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7d9      	b.n	8003ea2 <_printf_common+0x92>
	...

08003ef0 <_printf_i>:
 8003ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	7e0f      	ldrb	r7, [r1, #24]
 8003ef6:	4691      	mov	r9, r2
 8003ef8:	2f78      	cmp	r7, #120	; 0x78
 8003efa:	4680      	mov	r8, r0
 8003efc:	460c      	mov	r4, r1
 8003efe:	469a      	mov	sl, r3
 8003f00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f06:	d807      	bhi.n	8003f18 <_printf_i+0x28>
 8003f08:	2f62      	cmp	r7, #98	; 0x62
 8003f0a:	d80a      	bhi.n	8003f22 <_printf_i+0x32>
 8003f0c:	2f00      	cmp	r7, #0
 8003f0e:	f000 80d9 	beq.w	80040c4 <_printf_i+0x1d4>
 8003f12:	2f58      	cmp	r7, #88	; 0x58
 8003f14:	f000 80a4 	beq.w	8004060 <_printf_i+0x170>
 8003f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f20:	e03a      	b.n	8003f98 <_printf_i+0xa8>
 8003f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f26:	2b15      	cmp	r3, #21
 8003f28:	d8f6      	bhi.n	8003f18 <_printf_i+0x28>
 8003f2a:	a101      	add	r1, pc, #4	; (adr r1, 8003f30 <_printf_i+0x40>)
 8003f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f30:	08003f89 	.word	0x08003f89
 8003f34:	08003f9d 	.word	0x08003f9d
 8003f38:	08003f19 	.word	0x08003f19
 8003f3c:	08003f19 	.word	0x08003f19
 8003f40:	08003f19 	.word	0x08003f19
 8003f44:	08003f19 	.word	0x08003f19
 8003f48:	08003f9d 	.word	0x08003f9d
 8003f4c:	08003f19 	.word	0x08003f19
 8003f50:	08003f19 	.word	0x08003f19
 8003f54:	08003f19 	.word	0x08003f19
 8003f58:	08003f19 	.word	0x08003f19
 8003f5c:	080040ab 	.word	0x080040ab
 8003f60:	08003fcd 	.word	0x08003fcd
 8003f64:	0800408d 	.word	0x0800408d
 8003f68:	08003f19 	.word	0x08003f19
 8003f6c:	08003f19 	.word	0x08003f19
 8003f70:	080040cd 	.word	0x080040cd
 8003f74:	08003f19 	.word	0x08003f19
 8003f78:	08003fcd 	.word	0x08003fcd
 8003f7c:	08003f19 	.word	0x08003f19
 8003f80:	08003f19 	.word	0x08003f19
 8003f84:	08004095 	.word	0x08004095
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	1d1a      	adds	r2, r3, #4
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	602a      	str	r2, [r5, #0]
 8003f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0a4      	b.n	80040e6 <_printf_i+0x1f6>
 8003f9c:	6820      	ldr	r0, [r4, #0]
 8003f9e:	6829      	ldr	r1, [r5, #0]
 8003fa0:	0606      	lsls	r6, r0, #24
 8003fa2:	f101 0304 	add.w	r3, r1, #4
 8003fa6:	d50a      	bpl.n	8003fbe <_printf_i+0xce>
 8003fa8:	680e      	ldr	r6, [r1, #0]
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	2e00      	cmp	r6, #0
 8003fae:	da03      	bge.n	8003fb8 <_printf_i+0xc8>
 8003fb0:	232d      	movs	r3, #45	; 0x2d
 8003fb2:	4276      	negs	r6, r6
 8003fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fb8:	230a      	movs	r3, #10
 8003fba:	485e      	ldr	r0, [pc, #376]	; (8004134 <_printf_i+0x244>)
 8003fbc:	e019      	b.n	8003ff2 <_printf_i+0x102>
 8003fbe:	680e      	ldr	r6, [r1, #0]
 8003fc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fc4:	602b      	str	r3, [r5, #0]
 8003fc6:	bf18      	it	ne
 8003fc8:	b236      	sxthne	r6, r6
 8003fca:	e7ef      	b.n	8003fac <_printf_i+0xbc>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	1d19      	adds	r1, r3, #4
 8003fd2:	6029      	str	r1, [r5, #0]
 8003fd4:	0601      	lsls	r1, r0, #24
 8003fd6:	d501      	bpl.n	8003fdc <_printf_i+0xec>
 8003fd8:	681e      	ldr	r6, [r3, #0]
 8003fda:	e002      	b.n	8003fe2 <_printf_i+0xf2>
 8003fdc:	0646      	lsls	r6, r0, #25
 8003fde:	d5fb      	bpl.n	8003fd8 <_printf_i+0xe8>
 8003fe0:	881e      	ldrh	r6, [r3, #0]
 8003fe2:	2f6f      	cmp	r7, #111	; 0x6f
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2308      	moveq	r3, #8
 8003fe8:	230a      	movne	r3, #10
 8003fea:	4852      	ldr	r0, [pc, #328]	; (8004134 <_printf_i+0x244>)
 8003fec:	2100      	movs	r1, #0
 8003fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ff2:	6865      	ldr	r5, [r4, #4]
 8003ff4:	2d00      	cmp	r5, #0
 8003ff6:	bfa8      	it	ge
 8003ff8:	6821      	ldrge	r1, [r4, #0]
 8003ffa:	60a5      	str	r5, [r4, #8]
 8003ffc:	bfa4      	itt	ge
 8003ffe:	f021 0104 	bicge.w	r1, r1, #4
 8004002:	6021      	strge	r1, [r4, #0]
 8004004:	b90e      	cbnz	r6, 800400a <_printf_i+0x11a>
 8004006:	2d00      	cmp	r5, #0
 8004008:	d04d      	beq.n	80040a6 <_printf_i+0x1b6>
 800400a:	4615      	mov	r5, r2
 800400c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004010:	fb03 6711 	mls	r7, r3, r1, r6
 8004014:	5dc7      	ldrb	r7, [r0, r7]
 8004016:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800401a:	4637      	mov	r7, r6
 800401c:	42bb      	cmp	r3, r7
 800401e:	460e      	mov	r6, r1
 8004020:	d9f4      	bls.n	800400c <_printf_i+0x11c>
 8004022:	2b08      	cmp	r3, #8
 8004024:	d10b      	bne.n	800403e <_printf_i+0x14e>
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	07de      	lsls	r6, r3, #31
 800402a:	d508      	bpl.n	800403e <_printf_i+0x14e>
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	6861      	ldr	r1, [r4, #4]
 8004030:	4299      	cmp	r1, r3
 8004032:	bfde      	ittt	le
 8004034:	2330      	movle	r3, #48	; 0x30
 8004036:	f805 3c01 	strble.w	r3, [r5, #-1]
 800403a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800403e:	1b52      	subs	r2, r2, r5
 8004040:	6122      	str	r2, [r4, #16]
 8004042:	464b      	mov	r3, r9
 8004044:	4621      	mov	r1, r4
 8004046:	4640      	mov	r0, r8
 8004048:	f8cd a000 	str.w	sl, [sp]
 800404c:	aa03      	add	r2, sp, #12
 800404e:	f7ff fedf 	bl	8003e10 <_printf_common>
 8004052:	3001      	adds	r0, #1
 8004054:	d14c      	bne.n	80040f0 <_printf_i+0x200>
 8004056:	f04f 30ff 	mov.w	r0, #4294967295
 800405a:	b004      	add	sp, #16
 800405c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004060:	4834      	ldr	r0, [pc, #208]	; (8004134 <_printf_i+0x244>)
 8004062:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004066:	6829      	ldr	r1, [r5, #0]
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	f851 6b04 	ldr.w	r6, [r1], #4
 800406e:	6029      	str	r1, [r5, #0]
 8004070:	061d      	lsls	r5, r3, #24
 8004072:	d514      	bpl.n	800409e <_printf_i+0x1ae>
 8004074:	07df      	lsls	r7, r3, #31
 8004076:	bf44      	itt	mi
 8004078:	f043 0320 	orrmi.w	r3, r3, #32
 800407c:	6023      	strmi	r3, [r4, #0]
 800407e:	b91e      	cbnz	r6, 8004088 <_printf_i+0x198>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	f023 0320 	bic.w	r3, r3, #32
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	2310      	movs	r3, #16
 800408a:	e7af      	b.n	8003fec <_printf_i+0xfc>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	f043 0320 	orr.w	r3, r3, #32
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	2378      	movs	r3, #120	; 0x78
 8004096:	4828      	ldr	r0, [pc, #160]	; (8004138 <_printf_i+0x248>)
 8004098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800409c:	e7e3      	b.n	8004066 <_printf_i+0x176>
 800409e:	0659      	lsls	r1, r3, #25
 80040a0:	bf48      	it	mi
 80040a2:	b2b6      	uxthmi	r6, r6
 80040a4:	e7e6      	b.n	8004074 <_printf_i+0x184>
 80040a6:	4615      	mov	r5, r2
 80040a8:	e7bb      	b.n	8004022 <_printf_i+0x132>
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	6826      	ldr	r6, [r4, #0]
 80040ae:	1d18      	adds	r0, r3, #4
 80040b0:	6961      	ldr	r1, [r4, #20]
 80040b2:	6028      	str	r0, [r5, #0]
 80040b4:	0635      	lsls	r5, r6, #24
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	d501      	bpl.n	80040be <_printf_i+0x1ce>
 80040ba:	6019      	str	r1, [r3, #0]
 80040bc:	e002      	b.n	80040c4 <_printf_i+0x1d4>
 80040be:	0670      	lsls	r0, r6, #25
 80040c0:	d5fb      	bpl.n	80040ba <_printf_i+0x1ca>
 80040c2:	8019      	strh	r1, [r3, #0]
 80040c4:	2300      	movs	r3, #0
 80040c6:	4615      	mov	r5, r2
 80040c8:	6123      	str	r3, [r4, #16]
 80040ca:	e7ba      	b.n	8004042 <_printf_i+0x152>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	2100      	movs	r1, #0
 80040d0:	1d1a      	adds	r2, r3, #4
 80040d2:	602a      	str	r2, [r5, #0]
 80040d4:	681d      	ldr	r5, [r3, #0]
 80040d6:	6862      	ldr	r2, [r4, #4]
 80040d8:	4628      	mov	r0, r5
 80040da:	f000 f82f 	bl	800413c <memchr>
 80040de:	b108      	cbz	r0, 80040e4 <_printf_i+0x1f4>
 80040e0:	1b40      	subs	r0, r0, r5
 80040e2:	6060      	str	r0, [r4, #4]
 80040e4:	6863      	ldr	r3, [r4, #4]
 80040e6:	6123      	str	r3, [r4, #16]
 80040e8:	2300      	movs	r3, #0
 80040ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ee:	e7a8      	b.n	8004042 <_printf_i+0x152>
 80040f0:	462a      	mov	r2, r5
 80040f2:	4649      	mov	r1, r9
 80040f4:	4640      	mov	r0, r8
 80040f6:	6923      	ldr	r3, [r4, #16]
 80040f8:	47d0      	blx	sl
 80040fa:	3001      	adds	r0, #1
 80040fc:	d0ab      	beq.n	8004056 <_printf_i+0x166>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	079b      	lsls	r3, r3, #30
 8004102:	d413      	bmi.n	800412c <_printf_i+0x23c>
 8004104:	68e0      	ldr	r0, [r4, #12]
 8004106:	9b03      	ldr	r3, [sp, #12]
 8004108:	4298      	cmp	r0, r3
 800410a:	bfb8      	it	lt
 800410c:	4618      	movlt	r0, r3
 800410e:	e7a4      	b.n	800405a <_printf_i+0x16a>
 8004110:	2301      	movs	r3, #1
 8004112:	4632      	mov	r2, r6
 8004114:	4649      	mov	r1, r9
 8004116:	4640      	mov	r0, r8
 8004118:	47d0      	blx	sl
 800411a:	3001      	adds	r0, #1
 800411c:	d09b      	beq.n	8004056 <_printf_i+0x166>
 800411e:	3501      	adds	r5, #1
 8004120:	68e3      	ldr	r3, [r4, #12]
 8004122:	9903      	ldr	r1, [sp, #12]
 8004124:	1a5b      	subs	r3, r3, r1
 8004126:	42ab      	cmp	r3, r5
 8004128:	dcf2      	bgt.n	8004110 <_printf_i+0x220>
 800412a:	e7eb      	b.n	8004104 <_printf_i+0x214>
 800412c:	2500      	movs	r5, #0
 800412e:	f104 0619 	add.w	r6, r4, #25
 8004132:	e7f5      	b.n	8004120 <_printf_i+0x230>
 8004134:	08004475 	.word	0x08004475
 8004138:	08004486 	.word	0x08004486

0800413c <memchr>:
 800413c:	4603      	mov	r3, r0
 800413e:	b510      	push	{r4, lr}
 8004140:	b2c9      	uxtb	r1, r1
 8004142:	4402      	add	r2, r0
 8004144:	4293      	cmp	r3, r2
 8004146:	4618      	mov	r0, r3
 8004148:	d101      	bne.n	800414e <memchr+0x12>
 800414a:	2000      	movs	r0, #0
 800414c:	e003      	b.n	8004156 <memchr+0x1a>
 800414e:	7804      	ldrb	r4, [r0, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	428c      	cmp	r4, r1
 8004154:	d1f6      	bne.n	8004144 <memchr+0x8>
 8004156:	bd10      	pop	{r4, pc}

08004158 <memcpy>:
 8004158:	440a      	add	r2, r1
 800415a:	4291      	cmp	r1, r2
 800415c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004160:	d100      	bne.n	8004164 <memcpy+0xc>
 8004162:	4770      	bx	lr
 8004164:	b510      	push	{r4, lr}
 8004166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800416a:	4291      	cmp	r1, r2
 800416c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004170:	d1f9      	bne.n	8004166 <memcpy+0xe>
 8004172:	bd10      	pop	{r4, pc}

08004174 <memmove>:
 8004174:	4288      	cmp	r0, r1
 8004176:	b510      	push	{r4, lr}
 8004178:	eb01 0402 	add.w	r4, r1, r2
 800417c:	d902      	bls.n	8004184 <memmove+0x10>
 800417e:	4284      	cmp	r4, r0
 8004180:	4623      	mov	r3, r4
 8004182:	d807      	bhi.n	8004194 <memmove+0x20>
 8004184:	1e43      	subs	r3, r0, #1
 8004186:	42a1      	cmp	r1, r4
 8004188:	d008      	beq.n	800419c <memmove+0x28>
 800418a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800418e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004192:	e7f8      	b.n	8004186 <memmove+0x12>
 8004194:	4601      	mov	r1, r0
 8004196:	4402      	add	r2, r0
 8004198:	428a      	cmp	r2, r1
 800419a:	d100      	bne.n	800419e <memmove+0x2a>
 800419c:	bd10      	pop	{r4, pc}
 800419e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041a6:	e7f7      	b.n	8004198 <memmove+0x24>

080041a8 <_free_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4605      	mov	r5, r0
 80041ac:	2900      	cmp	r1, #0
 80041ae:	d040      	beq.n	8004232 <_free_r+0x8a>
 80041b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b4:	1f0c      	subs	r4, r1, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bfb8      	it	lt
 80041ba:	18e4      	addlt	r4, r4, r3
 80041bc:	f000 f910 	bl	80043e0 <__malloc_lock>
 80041c0:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <_free_r+0x8c>)
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	b933      	cbnz	r3, 80041d4 <_free_r+0x2c>
 80041c6:	6063      	str	r3, [r4, #4]
 80041c8:	6014      	str	r4, [r2, #0]
 80041ca:	4628      	mov	r0, r5
 80041cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041d0:	f000 b90c 	b.w	80043ec <__malloc_unlock>
 80041d4:	42a3      	cmp	r3, r4
 80041d6:	d908      	bls.n	80041ea <_free_r+0x42>
 80041d8:	6820      	ldr	r0, [r4, #0]
 80041da:	1821      	adds	r1, r4, r0
 80041dc:	428b      	cmp	r3, r1
 80041de:	bf01      	itttt	eq
 80041e0:	6819      	ldreq	r1, [r3, #0]
 80041e2:	685b      	ldreq	r3, [r3, #4]
 80041e4:	1809      	addeq	r1, r1, r0
 80041e6:	6021      	streq	r1, [r4, #0]
 80041e8:	e7ed      	b.n	80041c6 <_free_r+0x1e>
 80041ea:	461a      	mov	r2, r3
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	b10b      	cbz	r3, 80041f4 <_free_r+0x4c>
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	d9fa      	bls.n	80041ea <_free_r+0x42>
 80041f4:	6811      	ldr	r1, [r2, #0]
 80041f6:	1850      	adds	r0, r2, r1
 80041f8:	42a0      	cmp	r0, r4
 80041fa:	d10b      	bne.n	8004214 <_free_r+0x6c>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	4401      	add	r1, r0
 8004200:	1850      	adds	r0, r2, r1
 8004202:	4283      	cmp	r3, r0
 8004204:	6011      	str	r1, [r2, #0]
 8004206:	d1e0      	bne.n	80041ca <_free_r+0x22>
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4401      	add	r1, r0
 800420e:	6011      	str	r1, [r2, #0]
 8004210:	6053      	str	r3, [r2, #4]
 8004212:	e7da      	b.n	80041ca <_free_r+0x22>
 8004214:	d902      	bls.n	800421c <_free_r+0x74>
 8004216:	230c      	movs	r3, #12
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	e7d6      	b.n	80041ca <_free_r+0x22>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	1821      	adds	r1, r4, r0
 8004220:	428b      	cmp	r3, r1
 8004222:	bf01      	itttt	eq
 8004224:	6819      	ldreq	r1, [r3, #0]
 8004226:	685b      	ldreq	r3, [r3, #4]
 8004228:	1809      	addeq	r1, r1, r0
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	6063      	str	r3, [r4, #4]
 800422e:	6054      	str	r4, [r2, #4]
 8004230:	e7cb      	b.n	80041ca <_free_r+0x22>
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	2000050c 	.word	0x2000050c

08004238 <sbrk_aligned>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4e0e      	ldr	r6, [pc, #56]	; (8004274 <sbrk_aligned+0x3c>)
 800423c:	460c      	mov	r4, r1
 800423e:	6831      	ldr	r1, [r6, #0]
 8004240:	4605      	mov	r5, r0
 8004242:	b911      	cbnz	r1, 800424a <sbrk_aligned+0x12>
 8004244:	f000 f8bc 	bl	80043c0 <_sbrk_r>
 8004248:	6030      	str	r0, [r6, #0]
 800424a:	4621      	mov	r1, r4
 800424c:	4628      	mov	r0, r5
 800424e:	f000 f8b7 	bl	80043c0 <_sbrk_r>
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	d00a      	beq.n	800426c <sbrk_aligned+0x34>
 8004256:	1cc4      	adds	r4, r0, #3
 8004258:	f024 0403 	bic.w	r4, r4, #3
 800425c:	42a0      	cmp	r0, r4
 800425e:	d007      	beq.n	8004270 <sbrk_aligned+0x38>
 8004260:	1a21      	subs	r1, r4, r0
 8004262:	4628      	mov	r0, r5
 8004264:	f000 f8ac 	bl	80043c0 <_sbrk_r>
 8004268:	3001      	adds	r0, #1
 800426a:	d101      	bne.n	8004270 <sbrk_aligned+0x38>
 800426c:	f04f 34ff 	mov.w	r4, #4294967295
 8004270:	4620      	mov	r0, r4
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	20000510 	.word	0x20000510

08004278 <_malloc_r>:
 8004278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	1ccd      	adds	r5, r1, #3
 800427e:	f025 0503 	bic.w	r5, r5, #3
 8004282:	3508      	adds	r5, #8
 8004284:	2d0c      	cmp	r5, #12
 8004286:	bf38      	it	cc
 8004288:	250c      	movcc	r5, #12
 800428a:	2d00      	cmp	r5, #0
 800428c:	4607      	mov	r7, r0
 800428e:	db01      	blt.n	8004294 <_malloc_r+0x1c>
 8004290:	42a9      	cmp	r1, r5
 8004292:	d905      	bls.n	80042a0 <_malloc_r+0x28>
 8004294:	230c      	movs	r3, #12
 8004296:	2600      	movs	r6, #0
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4630      	mov	r0, r6
 800429c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a0:	4e2e      	ldr	r6, [pc, #184]	; (800435c <_malloc_r+0xe4>)
 80042a2:	f000 f89d 	bl	80043e0 <__malloc_lock>
 80042a6:	6833      	ldr	r3, [r6, #0]
 80042a8:	461c      	mov	r4, r3
 80042aa:	bb34      	cbnz	r4, 80042fa <_malloc_r+0x82>
 80042ac:	4629      	mov	r1, r5
 80042ae:	4638      	mov	r0, r7
 80042b0:	f7ff ffc2 	bl	8004238 <sbrk_aligned>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	4604      	mov	r4, r0
 80042b8:	d14d      	bne.n	8004356 <_malloc_r+0xde>
 80042ba:	6834      	ldr	r4, [r6, #0]
 80042bc:	4626      	mov	r6, r4
 80042be:	2e00      	cmp	r6, #0
 80042c0:	d140      	bne.n	8004344 <_malloc_r+0xcc>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	4631      	mov	r1, r6
 80042c6:	4638      	mov	r0, r7
 80042c8:	eb04 0803 	add.w	r8, r4, r3
 80042cc:	f000 f878 	bl	80043c0 <_sbrk_r>
 80042d0:	4580      	cmp	r8, r0
 80042d2:	d13a      	bne.n	800434a <_malloc_r+0xd2>
 80042d4:	6821      	ldr	r1, [r4, #0]
 80042d6:	3503      	adds	r5, #3
 80042d8:	1a6d      	subs	r5, r5, r1
 80042da:	f025 0503 	bic.w	r5, r5, #3
 80042de:	3508      	adds	r5, #8
 80042e0:	2d0c      	cmp	r5, #12
 80042e2:	bf38      	it	cc
 80042e4:	250c      	movcc	r5, #12
 80042e6:	4638      	mov	r0, r7
 80042e8:	4629      	mov	r1, r5
 80042ea:	f7ff ffa5 	bl	8004238 <sbrk_aligned>
 80042ee:	3001      	adds	r0, #1
 80042f0:	d02b      	beq.n	800434a <_malloc_r+0xd2>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	442b      	add	r3, r5
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	e00e      	b.n	8004318 <_malloc_r+0xa0>
 80042fa:	6822      	ldr	r2, [r4, #0]
 80042fc:	1b52      	subs	r2, r2, r5
 80042fe:	d41e      	bmi.n	800433e <_malloc_r+0xc6>
 8004300:	2a0b      	cmp	r2, #11
 8004302:	d916      	bls.n	8004332 <_malloc_r+0xba>
 8004304:	1961      	adds	r1, r4, r5
 8004306:	42a3      	cmp	r3, r4
 8004308:	6025      	str	r5, [r4, #0]
 800430a:	bf18      	it	ne
 800430c:	6059      	strne	r1, [r3, #4]
 800430e:	6863      	ldr	r3, [r4, #4]
 8004310:	bf08      	it	eq
 8004312:	6031      	streq	r1, [r6, #0]
 8004314:	5162      	str	r2, [r4, r5]
 8004316:	604b      	str	r3, [r1, #4]
 8004318:	4638      	mov	r0, r7
 800431a:	f104 060b 	add.w	r6, r4, #11
 800431e:	f000 f865 	bl	80043ec <__malloc_unlock>
 8004322:	f026 0607 	bic.w	r6, r6, #7
 8004326:	1d23      	adds	r3, r4, #4
 8004328:	1af2      	subs	r2, r6, r3
 800432a:	d0b6      	beq.n	800429a <_malloc_r+0x22>
 800432c:	1b9b      	subs	r3, r3, r6
 800432e:	50a3      	str	r3, [r4, r2]
 8004330:	e7b3      	b.n	800429a <_malloc_r+0x22>
 8004332:	6862      	ldr	r2, [r4, #4]
 8004334:	42a3      	cmp	r3, r4
 8004336:	bf0c      	ite	eq
 8004338:	6032      	streq	r2, [r6, #0]
 800433a:	605a      	strne	r2, [r3, #4]
 800433c:	e7ec      	b.n	8004318 <_malloc_r+0xa0>
 800433e:	4623      	mov	r3, r4
 8004340:	6864      	ldr	r4, [r4, #4]
 8004342:	e7b2      	b.n	80042aa <_malloc_r+0x32>
 8004344:	4634      	mov	r4, r6
 8004346:	6876      	ldr	r6, [r6, #4]
 8004348:	e7b9      	b.n	80042be <_malloc_r+0x46>
 800434a:	230c      	movs	r3, #12
 800434c:	4638      	mov	r0, r7
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	f000 f84c 	bl	80043ec <__malloc_unlock>
 8004354:	e7a1      	b.n	800429a <_malloc_r+0x22>
 8004356:	6025      	str	r5, [r4, #0]
 8004358:	e7de      	b.n	8004318 <_malloc_r+0xa0>
 800435a:	bf00      	nop
 800435c:	2000050c 	.word	0x2000050c

08004360 <_realloc_r>:
 8004360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004364:	4680      	mov	r8, r0
 8004366:	4614      	mov	r4, r2
 8004368:	460e      	mov	r6, r1
 800436a:	b921      	cbnz	r1, 8004376 <_realloc_r+0x16>
 800436c:	4611      	mov	r1, r2
 800436e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004372:	f7ff bf81 	b.w	8004278 <_malloc_r>
 8004376:	b92a      	cbnz	r2, 8004384 <_realloc_r+0x24>
 8004378:	f7ff ff16 	bl	80041a8 <_free_r>
 800437c:	4625      	mov	r5, r4
 800437e:	4628      	mov	r0, r5
 8004380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004384:	f000 f838 	bl	80043f8 <_malloc_usable_size_r>
 8004388:	4284      	cmp	r4, r0
 800438a:	4607      	mov	r7, r0
 800438c:	d802      	bhi.n	8004394 <_realloc_r+0x34>
 800438e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004392:	d812      	bhi.n	80043ba <_realloc_r+0x5a>
 8004394:	4621      	mov	r1, r4
 8004396:	4640      	mov	r0, r8
 8004398:	f7ff ff6e 	bl	8004278 <_malloc_r>
 800439c:	4605      	mov	r5, r0
 800439e:	2800      	cmp	r0, #0
 80043a0:	d0ed      	beq.n	800437e <_realloc_r+0x1e>
 80043a2:	42bc      	cmp	r4, r7
 80043a4:	4622      	mov	r2, r4
 80043a6:	4631      	mov	r1, r6
 80043a8:	bf28      	it	cs
 80043aa:	463a      	movcs	r2, r7
 80043ac:	f7ff fed4 	bl	8004158 <memcpy>
 80043b0:	4631      	mov	r1, r6
 80043b2:	4640      	mov	r0, r8
 80043b4:	f7ff fef8 	bl	80041a8 <_free_r>
 80043b8:	e7e1      	b.n	800437e <_realloc_r+0x1e>
 80043ba:	4635      	mov	r5, r6
 80043bc:	e7df      	b.n	800437e <_realloc_r+0x1e>
	...

080043c0 <_sbrk_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	2300      	movs	r3, #0
 80043c4:	4d05      	ldr	r5, [pc, #20]	; (80043dc <_sbrk_r+0x1c>)
 80043c6:	4604      	mov	r4, r0
 80043c8:	4608      	mov	r0, r1
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	f7fc ffd0 	bl	8001370 <_sbrk>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d102      	bne.n	80043da <_sbrk_r+0x1a>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	b103      	cbz	r3, 80043da <_sbrk_r+0x1a>
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	bd38      	pop	{r3, r4, r5, pc}
 80043dc:	20000514 	.word	0x20000514

080043e0 <__malloc_lock>:
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <__malloc_lock+0x8>)
 80043e2:	f000 b811 	b.w	8004408 <__retarget_lock_acquire_recursive>
 80043e6:	bf00      	nop
 80043e8:	20000518 	.word	0x20000518

080043ec <__malloc_unlock>:
 80043ec:	4801      	ldr	r0, [pc, #4]	; (80043f4 <__malloc_unlock+0x8>)
 80043ee:	f000 b80c 	b.w	800440a <__retarget_lock_release_recursive>
 80043f2:	bf00      	nop
 80043f4:	20000518 	.word	0x20000518

080043f8 <_malloc_usable_size_r>:
 80043f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043fc:	1f18      	subs	r0, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bfbc      	itt	lt
 8004402:	580b      	ldrlt	r3, [r1, r0]
 8004404:	18c0      	addlt	r0, r0, r3
 8004406:	4770      	bx	lr

08004408 <__retarget_lock_acquire_recursive>:
 8004408:	4770      	bx	lr

0800440a <__retarget_lock_release_recursive>:
 800440a:	4770      	bx	lr

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
